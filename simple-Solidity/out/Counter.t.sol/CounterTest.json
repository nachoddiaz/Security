{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"counter","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract Counter"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"setUp","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"testFuzz_SetNumber","inputs":[{"name":"x","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"test_Increment","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"bytecode":{"object":"0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b506112bf8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806361bc221a11610097578063b5508aa911610066578063b5508aa9146101bf578063ba414fa6146101c7578063e20c9f71146101df578063fa7626d4146101e757600080fd5b806361bc221a1461016257806366d9a9a01461018d57806385226c81146101a2578063916a17c6146101b757600080fd5b80633e5e3c23116100d35780633e5e3c23146101375780633f7286f41461013f5780634820a105146101475780635c7f60d71461014f57600080fd5b80630a9254e4146100fa5780631ed7831c146101045780632ade388014610122575b600080fd5b6101026101f4565b005b61010c61028d565b6040516101199190610dfa565b60405180910390f35b61012a6102ef565b6040516101199190610e6b565b61010c610431565b61010c610491565b6101026104f1565b61010261015d366004610f46565b6105dc565b601c54610175906001600160a01b031681565b6040516001600160a01b039091168152602001610119565b6101956106bd565b6040516101199190610f5f565b6101aa6107a3565b6040516101199190611014565b610195610873565b6101aa610959565b6101cf610a29565b6040519015158152602001610119565b61010c610b56565b6007546101cf9060ff1681565b60405161020090610ded565b604051809103906000f08015801561021c573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b03929092169182179055604051633fb5c1cb60e01b815260006004820152633fb5c1cb90602401600060405180830381600087803b15801561027357600080fd5b505af1158015610287573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102e557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c7575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561042857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561041157838290600052602060002001805461038490611081565b80601f01602080910402602001604051908101604052809291908181526020018280546103b090611081565b80156103fd5780601f106103d2576101008083540402835291602001916103fd565b820191906000526020600020905b8154815290600101906020018083116103e057829003601f168201915b505050505081526020019060010190610365565b505050508152505081526020019060010190610313565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b601c60009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561054157600080fd5b505af1158015610555573d6000803e3d6000fd5b505050506105da601c60009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d391906110bb565b6001610bb6565b565b601c54604051633fb5c1cb60e01b8152600481018390526001600160a01b0390911690633fb5c1cb90602401600060405180830381600087803b15801561062257600080fd5b505af1158015610636573d6000803e3d6000fd5b505050506106ba601c60009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b491906110bb565b82610bb6565b50565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104285760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561078b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161074d5790505b505050505081525050815260200190600101906106e1565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104285783829060005260206000200180546107e690611081565b80601f016020809104026020016040519081016040528092919081815260200182805461081290611081565b801561085f5780601f106108345761010080835404028352916020019161085f565b820191906000526020600020905b81548152906001019060200180831161084257829003601f168201915b5050505050815260200190600101906107c7565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104285760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561094157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109035790505b50505050508152505081526020019060010190610897565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561042857838290600052602060002001805461099c90611081565b80601f01602080910402602001604051908101604052809291908181526020018280546109c890611081565b8015610a155780601f106109ea57610100808354040283529160200191610a15565b820191906000526020600020905b8154815290600101906020018083116109f857829003601f168201915b50505050508152602001906001019061097d565b600754600090610100900460ff1615610a4b5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b515760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610ad9917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016110d4565b60408051601f1981840301815290829052610af391611105565b6000604051808303816000865af19150503d8060008114610b30576040519150601f19603f3d011682016040523d82523d6000602084013e610b35565b606091505b5091505080806020019051810190610b4d9190611121565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b808214610cdd577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610c279060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610cdd610ce1565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ddc5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610d7b92916020016110d4565b60408051601f1981840301815290829052610d9591611105565b6000604051808303816000865af19150503d8060008114610dd2576040519150601f19603f3d011682016040523d82523d6000602084013e610dd7565b606091505b505050505b6007805461ff001916610100179055565b61013f8061114b83390190565b6020808252825182820181905260009190848201906040850190845b81811015610e3b5783516001600160a01b031683529284019291840191600101610e16565b50909695505050505050565b60005b83811015610e62578181015183820152602001610e4a565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f3957603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610f2257898403605f1901835284518051808652610f03818e88018f8501610e47565b958c0195601f01601f1916949094018b019350918a0191600101610edc565b509197505050938601935090850190600101610e92565b5092979650505050505050565b600060208284031215610f5857600080fd5b5035919050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b8481101561100557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610ff05783516001600160e01b0319168252928b019260019290920191908b0190610fc6565b50978a01979550505091870191600101610f89565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f3957878503603f1901845281518051808752611062818989018a8501610e47565b601f01601f19169590950186019450928501929085019060010161103b565b600181811c9082168061109557607f821691505b6020821081036110b557634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156110cd57600080fd5b5051919050565b6001600160e01b03198316815281516000906110f7816004850160208701610e47565b919091016004019392505050565b60008251611117818460208701610e47565b9190910192915050565b60006020828403121561113357600080fd5b8151801515811461114357600080fd5b939250505056fe608060405234801561001057600080fd5b5061011f806100206000396000f3fe6080604052348015600f57600080fd5b506004361060505760003560e01c80633fb5c1cb1460555780638381f58a14606757806390c52443146081578063d09de08a146089578063d6980dfd14608f575b600080fd5b6065606036600460ab565b600055565b005b606f60005481565b60405190815260200160405180910390f35b606f60015481565b60656097565b606f60025481565b60008054908060a48360c3565b9190505550565b60006020828403121560bc57600080fd5b5035919050565b60006001820160e257634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212208ea880a17eb711668fc8eaac9682e4e6bbec4f126095a1335c80df64d2d9569964736f6c63430008170033a2646970667358221220e38b940598f45d622767b92fb4f090b69eed56d1c63421bcf633df518ecd350364736f6c63430008170033","sourceMap":"161:402:23:-:0;;;1572:26:0;;;1594:4;-1:-1:-1;;1572:26:0;;;;;;;;3126:44:4;;;;;;;;;;;161:402:23;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806361bc221a11610097578063b5508aa911610066578063b5508aa9146101bf578063ba414fa6146101c7578063e20c9f71146101df578063fa7626d4146101e757600080fd5b806361bc221a1461016257806366d9a9a01461018d57806385226c81146101a2578063916a17c6146101b757600080fd5b80633e5e3c23116100d35780633e5e3c23146101375780633f7286f41461013f5780634820a105146101475780635c7f60d71461014f57600080fd5b80630a9254e4146100fa5780631ed7831c146101045780632ade388014610122575b600080fd5b6101026101f4565b005b61010c61028d565b6040516101199190610dfa565b60405180910390f35b61012a6102ef565b6040516101199190610e6b565b61010c610431565b61010c610491565b6101026104f1565b61010261015d366004610f46565b6105dc565b601c54610175906001600160a01b031681565b6040516001600160a01b039091168152602001610119565b6101956106bd565b6040516101199190610f5f565b6101aa6107a3565b6040516101199190611014565b610195610873565b6101aa610959565b6101cf610a29565b6040519015158152602001610119565b61010c610b56565b6007546101cf9060ff1681565b60405161020090610ded565b604051809103906000f08015801561021c573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b03929092169182179055604051633fb5c1cb60e01b815260006004820152633fb5c1cb90602401600060405180830381600087803b15801561027357600080fd5b505af1158015610287573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102e557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c7575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561042857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561041157838290600052602060002001805461038490611081565b80601f01602080910402602001604051908101604052809291908181526020018280546103b090611081565b80156103fd5780601f106103d2576101008083540402835291602001916103fd565b820191906000526020600020905b8154815290600101906020018083116103e057829003601f168201915b505050505081526020019060010190610365565b505050508152505081526020019060010190610313565b50505050905090565b606060168054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b601c60009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561054157600080fd5b505af1158015610555573d6000803e3d6000fd5b505050506105da601c60009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d391906110bb565b6001610bb6565b565b601c54604051633fb5c1cb60e01b8152600481018390526001600160a01b0390911690633fb5c1cb90602401600060405180830381600087803b15801561062257600080fd5b505af1158015610636573d6000803e3d6000fd5b505050506106ba601c60009054906101000a90046001600160a01b03166001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b491906110bb565b82610bb6565b50565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104285760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561078b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161074d5790505b505050505081525050815260200190600101906106e1565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156104285783829060005260206000200180546107e690611081565b80601f016020809104026020016040519081016040528092919081815260200182805461081290611081565b801561085f5780601f106108345761010080835404028352916020019161085f565b820191906000526020600020905b81548152906001019060200180831161084257829003601f168201915b5050505050815260200190600101906107c7565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104285760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561094157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109035790505b50505050508152505081526020019060010190610897565b60606017805480602002602001604051908101604052809291908181526020016000905b8282101561042857838290600052602060002001805461099c90611081565b80601f01602080910402602001604051908101604052809291908181526020018280546109c890611081565b8015610a155780601f106109ea57610100808354040283529160200191610a15565b820191906000526020600020905b8154815290600101906020018083116109f857829003601f168201915b50505050508152602001906001019061097d565b600754600090610100900460ff1615610a4b5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b515760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610ad9917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016110d4565b60408051601f1981840301815290829052610af391611105565b6000604051808303816000865af19150503d8060008114610b30576040519150601f19603f3d011682016040523d82523d6000602084013e610b35565b606091505b5091505080806020019051810190610b4d9190611121565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156102e5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c7575050505050905090565b808214610cdd577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610c279060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610cdd610ce1565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ddc5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610d7b92916020016110d4565b60408051601f1981840301815290829052610d9591611105565b6000604051808303816000865af19150503d8060008114610dd2576040519150601f19603f3d011682016040523d82523d6000602084013e610dd7565b606091505b505050505b6007805461ff001916610100179055565b61013f8061114b83390190565b6020808252825182820181905260009190848201906040850190845b81811015610e3b5783516001600160a01b031683529284019291840191600101610e16565b50909695505050505050565b60005b83811015610e62578181015183820152602001610e4a565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f3957603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b81811015610f2257898403605f1901835284518051808652610f03818e88018f8501610e47565b958c0195601f01601f1916949094018b019350918a0191600101610edc565b509197505050938601935090850190600101610e92565b5092979650505050505050565b600060208284031215610f5857600080fd5b5035919050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b8481101561100557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610ff05783516001600160e01b0319168252928b019260019290920191908b0190610fc6565b50978a01979550505091870191600101610f89565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f3957878503603f1901845281518051808752611062818989018a8501610e47565b601f01601f19169590950186019450928501929085019060010161103b565b600181811c9082168061109557607f821691505b6020821081036110b557634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156110cd57600080fd5b5051919050565b6001600160e01b03198316815281516000906110f7816004850160208701610e47565b919091016004019392505050565b60008251611117818460208701610e47565b9190910192915050565b60006020828403121561113357600080fd5b8151801515811461114357600080fd5b939250505056fe608060405234801561001057600080fd5b5061011f806100206000396000f3fe6080604052348015600f57600080fd5b506004361060505760003560e01c80633fb5c1cb1460555780638381f58a14606757806390c52443146081578063d09de08a146089578063d6980dfd14608f575b600080fd5b6065606036600460ab565b600055565b005b606f60005481565b60405190815260200160405180910390f35b606f60015481565b60656097565b606f60025481565b60008054908060a48360c3565b9190505550565b60006020828403121560bc57600080fd5b5035919050565b60006001820160e257634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212208ea880a17eb711668fc8eaac9682e4e6bbec4f126095a1335c80df64d2d9569964736f6c63430008170033a2646970667358221220e38b940598f45d622767b92fb4f090b69eed56d1c63421bcf633df518ecd350364736f6c63430008170033","sourceMap":"161:402:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;225:94;;;:::i;:::-;;2452:134:7;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3360:151;;;:::i;:::-;;;;;;;:::i;3221:133::-;;;:::i;2922:141::-;;;:::i;325:108:23:-;;;:::i;439:122::-;;;;;;:::i;:::-;;:::i;196:22::-;;;;;-1:-1:-1;;;;;196:22:23;;;;;;-1:-1:-1;;;;;3202:32:24;;;3184:51;;3172:2;3157:18;196:22:23;3021:220:24;2738:178:7;;;:::i;:::-;;;;;;;:::i;2592:140::-;;;:::i;:::-;;;;;;;:::i;3069:146::-;;;:::i;2157:141::-;;;:::i;1819:584:0:-;;;:::i;:::-;;;6002:14:24;;5995:22;5977:41;;5965:2;5950:18;1819:584:0;5837:187:24;2304:142:7;;;:::i;1572:26:0:-;;;;;;;;;225:94:23;269:13;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;259:7:23;:23;;-1:-1:-1;;;;;;259:23:23;-1:-1:-1;;;;;259:23:23;;;;;;;;;292:20;;-1:-1:-1;;;292:20:23;;-1:-1:-1;292:20:23;;;6183:25:24;292:17:23;;6156:18:24;;292:20:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;225:94::o;2452:134:7:-;2499:33;2563:16;2544:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2544:35:7;;;;;;;;;;;;;;;;;;;;;;;2452:134;:::o;3360:151::-;3409:42;3485:19;3463:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3463:41:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3360:151;:::o;3221:133::-;3267:33;3331:16;3312:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3312:35:7;;;;;;;;;;;;;;;;;;;;;;3221:133;:::o;2922:141::-;2970:35;3038:18;3017:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3017:39:7;;;;;;;;;;;;;;;;;;;;;;2922:141;:::o;325:108:23:-;368:7;;;;;;;;;-1:-1:-1;;;;;368:7:23;-1:-1:-1;;;;;368:17:23;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;397:29;406:7;;;;;;;;;-1:-1:-1;;;;;406:7:23;-1:-1:-1;;;;;406:14:23;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;424:1;397:8;:29::i;:::-;325:108::o;439:122::-;495:7;;:20;;-1:-1:-1;;;495:20:23;;;;;6183:25:24;;;-1:-1:-1;;;;;495:7:23;;;;:17;;6156:18:24;;495:20:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;525:29;534:7;;;;;;;;;-1:-1:-1;;;;;534:7:23;-1:-1:-1;;;;;534:14:23;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;552:1;525:8;:29::i;:::-;439:122;:::o;2738:178:7:-;2794:48;2883:26;2854:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2854:55:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2854:55:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2592:140;2640:34;2707:18;2686:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3069:146;3117:40;3190:18;3169:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3169:39:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3169:39:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2157:141;2206:34;2273:18;2252:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1819:584:0;1873:7;;1853:4;;1873:7;;;;;1869:528;;;-1:-1:-1;1903:7:0;;;;;;;;1819:584::o;1869:528::-;1941:17;2997:42;2985:55;3066:16;1980:374;;2196:43;;;1671:64;2196:43;;;7149:51:24;;;-1:-1:-1;;;7216:18:24;;;7209:34;2196:43:0;;;;;;;;;7122:18:24;;;2196:43:0;;;-1:-1:-1;;1671:64:0;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:0;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:0:o;2304:142:7:-;2353:35;2421:18;2400:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2400:39:7;;;;;;;;;;;;;;;;;;;;;;2304:142;:::o;5209:262:0:-;5271:1;5266;:6;5262:203;;5293:41;;;;;8419:2:24;8401:21;;;8458:2;8438:18;;;8431:30;8497:34;8492:2;8477:18;;8470:62;-1:-1:-1;;;8563:2:24;8548:18;;8541:32;8605:3;8590:19;;8217:398;5293:41:0;;;;;;;;5353:31;;;8832:21:24;;;8889:2;8869:18;;;8862:30;-1:-1:-1;;;8923:2:24;8908:18;;8901:40;9008:4;8993:20;;8986:36;;;5353:31:0;;;;;;;8973:3:24;5353:31:0;;;5403;;;9245:21:24;;;9302:2;9282:18;;;9275:30;-1:-1:-1;;;9336:2:24;9321:18;;9314:40;9421:4;9406:20;;9399:36;;;5403:31:0;;;;;;;9386:3:24;5403:31:0;;;5448:6;:4;:6::i;:::-;5209:262;;:::o;2409:432::-;2997:42;2985:55;3066:16;2452:359;;2652:67;;;1671:64;2652:67;;;9648:51:24;;;-1:-1:-1;;;9715:18:24;;;9708:34;;;;2712:4:0;9758:18:24;;;9751:34;2489:11:0;;1671:64;2586:43;;9621:18:24;;2652:67:0;;;-1:-1:-1;;2652:67:0;;;;;;;;;;2541:196;;;2652:67;2541:196;;:::i;:::-;;;;-1:-1:-1;;2541:196:0;;;;;;;;;;2506:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2452:359:0;2820:7;:14;;-1:-1:-1;;2820:14:0;;;;;2409:432::o;-1:-1:-1:-;;;;;;;;:::o;14:658:24:-;185:2;237:21;;;307:13;;210:18;;;329:22;;;156:4;;185:2;408:15;;;;382:2;367:18;;;156:4;451:195;465:6;462:1;459:13;451:195;;;530:13;;-1:-1:-1;;;;;526:39:24;514:52;;621:15;;;;586:12;;;;562:1;480:9;451:195;;;-1:-1:-1;663:3:24;;14:658;-1:-1:-1;;;;;;14:658:24:o;677:250::-;762:1;772:113;786:6;783:1;780:13;772:113;;;862:11;;;856:18;843:11;;;836:39;808:2;801:10;772:113;;;-1:-1:-1;;919:1:24;901:16;;894:27;677:250::o;932:1899::-;1136:4;1165:2;1205;1194:9;1190:18;1235:2;1224:9;1217:21;1258:6;1293;1287:13;1324:6;1316;1309:22;1362:2;1351:9;1347:18;1340:25;;1424:2;1414:6;1411:1;1407:14;1396:9;1392:30;1388:39;1374:53;;1462:2;1454:6;1450:15;1483:1;1493:1309;1507:6;1504:1;1501:13;1493:1309;;;-1:-1:-1;;1572:22:24;;;1568:36;1556:49;;1628:13;;1715:9;;-1:-1:-1;;;;;1711:35:24;1696:51;;1786:11;;1780:18;1680:2;1818:15;;;1811:27;;;1899:19;;1668:15;;;1931:24;;;2111:21;;;;1978:2;2064:1;2060:16;;;2048:29;;2044:38;;;2002:15;;;;2156:1;2170:523;2186:8;2181:3;2178:17;2170:523;;;2267:19;;;-1:-1:-1;;2263:33:24;2249:48;;2324:15;;2372:9;;2398:24;;;2439:74;2372:9;2487:15;;;2474:11;;;2439:74;:::i;:::-;2622:17;;;;2583:2;2560:17;-1:-1:-1;;2556:31:24;2544:44;;;;2540:53;;;-1:-1:-1;2665:14:24;;;;2214:1;2205:11;2170:523;;;-1:-1:-1;2716:6:24;;-1:-1:-1;;;2780:12:24;;;;-1:-1:-1;2745:15:24;;;;1529:1;1522:9;1493:1309;;;-1:-1:-1;2819:6:24;;932:1899;-1:-1:-1;;;;;;;932:1899:24:o;2836:180::-;2895:6;2948:2;2936:9;2927:7;2923:23;2919:32;2916:52;;;2964:1;2961;2954:12;2916:52;-1:-1:-1;2987:23:24;;2836:180;-1:-1:-1;2836:180:24:o;3246:1567::-;3448:4;3477:2;3517;3506:9;3502:18;3547:2;3536:9;3529:21;3570:6;3605;3599:13;3636:6;3628;3621:22;3662:2;3652:12;;3695:2;3684:9;3680:18;3673:25;;3757:2;3747:6;3744:1;3740:14;3729:9;3725:30;3721:39;3795:2;3787:6;3783:15;3816:1;3837;3847:937;3863:6;3858:3;3855:15;3847:937;;;3932:22;;;-1:-1:-1;;3928:36:24;3916:49;;3988:13;;4075:9;;-1:-1:-1;;;;;4071:35:24;4056:51;;4146:11;;4140:18;4178:15;;;4171:27;;;4259:19;;4028:15;;;4291:24;;;4381:21;;;;4426:1;;4349:2;4337:15;;;4440:236;4456:8;4451:3;4448:17;4440:236;;;4537:15;;-1:-1:-1;;;;;;4533:42:24;4519:57;;4645:17;;;;4484:1;4475:11;;;;;4602:14;;;;4440:236;;;-1:-1:-1;4762:12:24;;;;4699:5;-1:-1:-1;;;4727:15:24;;;;3889:1;3880:11;3847:937;;;-1:-1:-1;4801:6:24;;3246:1567;-1:-1:-1;;;;;;;;;3246:1567:24:o;4818:1014::-;4980:4;5009:2;5049;5038:9;5034:18;5079:2;5068:9;5061:21;5102:6;5137;5131:13;5168:6;5160;5153:22;5206:2;5195:9;5191:18;5184:25;;5268:2;5258:6;5255:1;5251:14;5240:9;5236:30;5232:39;5218:53;;5306:2;5298:6;5294:15;5327:1;5337:466;5351:6;5348:1;5345:13;5337:466;;;5416:22;;;-1:-1:-1;;5412:36:24;5400:49;;5472:13;;5514:9;;5536:24;;;5573:74;5514:9;5621:15;;;5608:11;;;5573:74;:::i;:::-;5713:2;5690:17;-1:-1:-1;;5686:31:24;5674:44;;;;5670:53;;;-1:-1:-1;5781:12:24;;;;5746:15;;;;5373:1;5366:9;5337:466;;6219:380;6298:1;6294:12;;;;6341;;;6362:61;;6416:4;6408:6;6404:17;6394:27;;6362:61;6469:2;6461:6;6458:14;6438:18;6435:38;6432:161;;6515:10;6510:3;6506:20;6503:1;6496:31;6550:4;6547:1;6540:15;6578:4;6575:1;6568:15;6432:161;;6219:380;;;:::o;6604:184::-;6674:6;6727:2;6715:9;6706:7;6702:23;6698:32;6695:52;;;6743:1;6740;6733:12;6695:52;-1:-1:-1;6766:16:24;;6604:184;-1:-1:-1;6604:184:24:o;7254:384::-;-1:-1:-1;;;;;;7439:33:24;;7427:46;;7496:13;;7409:3;;7518:74;7496:13;7581:1;7572:11;;7565:4;7553:17;;7518:74;:::i;:::-;7612:16;;;;7630:1;7608:24;;7254:384;-1:-1:-1;;;7254:384:24:o;7643:287::-;7772:3;7810:6;7804:13;7826:66;7885:6;7880:3;7873:4;7865:6;7861:17;7826:66;:::i;:::-;7908:16;;;;;7643:287;-1:-1:-1;;7643:287:24:o;7935:277::-;8002:6;8055:2;8043:9;8034:7;8030:23;8026:32;8023:52;;;8071:1;8068;8061:12;8023:52;8103:9;8097:16;8156:5;8149:13;8142:21;8135:5;8132:32;8122:60;;8178:1;8175;8168:12;8122:60;8201:5;7935:277;-1:-1:-1;;;7935:277:24:o","linkReferences":{}},"assembly":"    /* \"test/Counter.t.sol\":161:563  contract CounterTest is Test {... */\n  mstore(0x40, 0x80)\n    /* \"lib/forge-std/lib/ds-test/src/test.sol\":1572:1598  bool public IS_TEST = true */\n  0x07\n  dup1\n  sload\n    /* \"lib/forge-std/lib/ds-test/src/test.sol\":1594:1598  true */\n  0x01\n  not(0xff)\n    /* \"lib/forge-std/lib/ds-test/src/test.sol\":1572:1598  bool public IS_TEST = true */\n  swap2\n  dup3\n  and\n  dup2\n  or\n  swap1\n  swap3\n  sstore\n    /* \"lib/forge-std/src/StdChains.sol\":3126:3170  bool private fallbackToDefaultRpcUrls = true */\n  0x0b\n  dup1\n  sload\n  swap1\n  swap2\n  and\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"test/Counter.t.sol\":161:563  contract CounterTest is Test {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"test/Counter.t.sol\":161:563  contract CounterTest is Test {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x61bc221a\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xb5508aa9\n      gt\n      tag_19\n      jumpi\n      dup1\n      0xb5508aa9\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xba414fa6\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xe20c9f71\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xfa7626d4\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      dup1\n      0x61bc221a\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x66d9a9a0\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x85226c81\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x916a17c6\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup1\n      0x3e5e3c23\n      gt\n      tag_20\n      jumpi\n      dup1\n      0x3e5e3c23\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x3f7286f4\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x4820a105\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x5c7f60d7\n      eq\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      dup1\n      0x0a9254e4\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x1ed7831c\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2ade3880\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"test/Counter.t.sol\":225:319  function setUp() public {... */\n    tag_3:\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      stop\n        /* \"lib/forge-std/src/StdInvariant.sol\":2452:2586  function excludeSenders() public view returns (address[] memory excludedSenders_) {... */\n    tag_4:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/forge-std/src/StdInvariant.sol\":3360:3511  function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {... */\n    tag_5:\n      tag_27\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n        /* \"lib/forge-std/src/StdInvariant.sol\":3221:3354  function targetSenders() public view returns (address[] memory targetedSenders_) {... */\n    tag_6:\n      tag_23\n      tag_32\n      jump\t// in\n        /* \"lib/forge-std/src/StdInvariant.sol\":2922:3063  function targetContracts() public view returns (address[] memory targetedContracts_) {... */\n    tag_7:\n      tag_23\n      tag_35\n      jump\t// in\n        /* \"test/Counter.t.sol\":325:433  function test_Increment() public {... */\n    tag_8:\n      tag_21\n      tag_38\n      jump\t// in\n        /* \"test/Counter.t.sol\":439:561  function testFuzz_SetNumber(uint256 x) public {... */\n    tag_9:\n      tag_21\n      tag_40\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_40:\n      tag_42\n      jump\t// in\n        /* \"test/Counter.t.sol\":196:218  Counter public counter */\n    tag_10:\n      sload(0x1c)\n      tag_43\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_43:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3202:3234   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3184:3235   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3172:3174   */\n      0x20\n        /* \"#utility.yul\":3157:3175   */\n      add\n        /* \"test/Counter.t.sol\":196:218  Counter public counter */\n      tag_25\n        /* \"#utility.yul\":3021:3241   */\n      jump\n        /* \"lib/forge-std/src/StdInvariant.sol\":2738:2916  function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {... */\n    tag_11:\n      tag_47\n      tag_48\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n        /* \"lib/forge-std/src/StdInvariant.sol\":2592:2732  function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {... */\n    tag_12:\n      tag_51\n      tag_52\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n        /* \"lib/forge-std/src/StdInvariant.sol\":3069:3215  function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {... */\n    tag_13:\n      tag_47\n      tag_56\n      jump\t// in\n        /* \"lib/forge-std/src/StdInvariant.sol\":2157:2298  function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {... */\n    tag_14:\n      tag_51\n      tag_59\n      jump\t// in\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1819:2403  function failed() public returns (bool) {... */\n    tag_15:\n      tag_61\n      tag_62\n      jump\t// in\n    tag_61:\n      mload(0x40)\n        /* \"#utility.yul\":6002:6016   */\n      swap1\n      iszero\n        /* \"#utility.yul\":5995:6017   */\n      iszero\n        /* \"#utility.yul\":5977:6018   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5965:5967   */\n      0x20\n        /* \"#utility.yul\":5950:5968   */\n      add\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1819:2403  function failed() public returns (bool) {... */\n      tag_25\n        /* \"#utility.yul\":5837:6024   */\n      jump\n        /* \"lib/forge-std/src/StdInvariant.sol\":2304:2446  function excludeContracts() public view returns (address[] memory excludedContracts_) {... */\n    tag_16:\n      tag_23\n      tag_66\n      jump\t// in\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1572:1598  bool public IS_TEST = true */\n    tag_17:\n      sload(0x07)\n      tag_61\n      swap1\n      0xff\n      and\n      dup2\n      jump\n        /* \"test/Counter.t.sol\":225:319  function setUp() public {... */\n    tag_22:\n        /* \"test/Counter.t.sol\":269:282  new Counter() */\n      mload(0x40)\n      tag_72\n      swap1\n      tag_73\n      jump\t// in\n    tag_72:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      0x00\n      create\n      dup1\n      iszero\n      dup1\n      iszero\n      tag_74\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_74:\n      pop\n        /* \"test/Counter.t.sol\":259:266  counter */\n      0x1c\n        /* \"test/Counter.t.sol\":259:282  counter = new Counter() */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      dup3\n      or\n      swap1\n      sstore\n        /* \"test/Counter.t.sol\":292:312  counter.setNumber(0) */\n      mload(0x40)\n      shl(0xe0, 0x3fb5c1cb)\n      dup2\n      mstore\n      0x00\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6183:6208   */\n      mstore\n        /* \"test/Counter.t.sol\":292:309  counter.setNumber */\n      0x3fb5c1cb\n      swap1\n        /* \"#utility.yul\":6156:6174   */\n      0x24\n      add\n        /* \"test/Counter.t.sol\":292:312  counter.setNumber(0) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_79\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_79:\n      pop\n      pop\n      pop\n      pop\n        /* \"test/Counter.t.sol\":225:319  function setUp() public {... */\n      jump\t// out\n        /* \"lib/forge-std/src/StdInvariant.sol\":2452:2586  function excludeSenders() public view returns (address[] memory excludedSenders_) {... */\n    tag_24:\n        /* \"lib/forge-std/src/StdInvariant.sol\":2499:2532  address[] memory excludedSenders_ */\n      0x60\n        /* \"lib/forge-std/src/StdInvariant.sol\":2563:2579  _excludedSenders */\n      0x14\n        /* \"lib/forge-std/src/StdInvariant.sol\":2544:2579  excludedSenders_ = _excludedSenders */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      dup1\n      iszero\n      tag_81\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_82:\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_82\n      jumpi\n    tag_81:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"lib/forge-std/src/StdInvariant.sol\":2452:2586  function excludeSenders() public view returns (address[] memory excludedSenders_) {... */\n      swap1\n      jump\t// out\n        /* \"lib/forge-std/src/StdInvariant.sol\":3360:3511  function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {... */\n    tag_28:\n        /* \"lib/forge-std/src/StdInvariant.sol\":3409:3451  FuzzInterface[] memory targetedInterfaces_ */\n      0x60\n        /* \"lib/forge-std/src/StdInvariant.sol\":3485:3504  _targetedInterfaces */\n      0x1b\n        /* \"lib/forge-std/src/StdInvariant.sol\":3463:3504  targetedInterfaces_ = _targetedInterfaces */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      swap1\n    tag_84:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_85\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      keccak256\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      dup3\n      mstore\n      0x02\n      dup8\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup4\n      mstore\n      0x01\n      dup2\n      add\n      dup1\n      sload\n      dup4\n      mload\n      dup2\n      dup8\n      mul\n      dup2\n      add\n      dup8\n      add\n      swap1\n      swap5\n      mstore\n      dup1\n      dup5\n      mstore\n      swap4\n      swap6\n      swap2\n      swap5\n      dup7\n      dup2\n      add\n      swap5\n      swap2\n      swap3\n      swap1\n      dup5\n      add\n    tag_87:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_88\n      jumpi\n      dup4\n      dup3\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      dup1\n      sload\n      tag_90\n      swap1\n      tag_91\n      jump\t// in\n    tag_90:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_92\n      swap1\n      tag_91\n      jump\t// in\n    tag_92:\n      dup1\n      iszero\n      tag_93\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_94\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_93)\n    tag_94:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_95:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_95\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_93:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_87)\n    tag_88:\n      pop\n      pop\n      pop\n      pop\n      dup2\n      mstore\n      pop\n      pop\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_84)\n    tag_85:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"lib/forge-std/src/StdInvariant.sol\":3360:3511  function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {... */\n      swap1\n      jump\t// out\n        /* \"lib/forge-std/src/StdInvariant.sol\":3221:3354  function targetSenders() public view returns (address[] memory targetedSenders_) {... */\n    tag_32:\n        /* \"lib/forge-std/src/StdInvariant.sol\":3267:3300  address[] memory targetedSenders_ */\n      0x60\n        /* \"lib/forge-std/src/StdInvariant.sol\":3331:3347  _targetedSenders */\n      0x16\n        /* \"lib/forge-std/src/StdInvariant.sol\":3312:3347  targetedSenders_ = _targetedSenders */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      dup1\n      iszero\n      tag_81\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_82\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"lib/forge-std/src/StdInvariant.sol\":3221:3354  function targetSenders() public view returns (address[] memory targetedSenders_) {... */\n      swap1\n      jump\t// out\n        /* \"lib/forge-std/src/StdInvariant.sol\":2922:3063  function targetContracts() public view returns (address[] memory targetedContracts_) {... */\n    tag_35:\n        /* \"lib/forge-std/src/StdInvariant.sol\":2970:3005  address[] memory targetedContracts_ */\n      0x60\n        /* \"lib/forge-std/src/StdInvariant.sol\":3038:3056  _targetedContracts */\n      0x15\n        /* \"lib/forge-std/src/StdInvariant.sol\":3017:3056  targetedContracts_ = _targetedContracts */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      dup1\n      iszero\n      tag_81\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_82\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"lib/forge-std/src/StdInvariant.sol\":2922:3063  function targetContracts() public view returns (address[] memory targetedContracts_) {... */\n      swap1\n      jump\t// out\n        /* \"test/Counter.t.sol\":325:433  function test_Increment() public {... */\n    tag_38:\n        /* \"test/Counter.t.sol\":368:375  counter */\n      0x1c\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"test/Counter.t.sol\":368:385  counter.increment */\n      and\n      0xd09de08a\n        /* \"test/Counter.t.sol\":368:387  counter.increment() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_103\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_103:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_105\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_105:\n      pop\n      pop\n      pop\n      pop\n        /* \"test/Counter.t.sol\":397:426  assertEq(counter.number(), 1) */\n      tag_106\n        /* \"test/Counter.t.sol\":406:413  counter */\n      0x1c\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"test/Counter.t.sol\":406:420  counter.number */\n      and\n      0x8381f58a\n        /* \"test/Counter.t.sol\":406:422  counter.number() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_108\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_108:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_109\n      swap2\n      swap1\n      tag_110\n      jump\t// in\n    tag_109:\n        /* \"test/Counter.t.sol\":424:425  1 */\n      0x01\n        /* \"test/Counter.t.sol\":397:405  assertEq */\n      tag_111\n        /* \"test/Counter.t.sol\":397:426  assertEq(counter.number(), 1) */\n      jump\t// in\n    tag_106:\n        /* \"test/Counter.t.sol\":325:433  function test_Increment() public {... */\n      jump\t// out\n        /* \"test/Counter.t.sol\":439:561  function testFuzz_SetNumber(uint256 x) public {... */\n    tag_42:\n        /* \"test/Counter.t.sol\":495:502  counter */\n      sload(0x1c)\n        /* \"test/Counter.t.sol\":495:515  counter.setNumber(x) */\n      mload(0x40)\n      shl(0xe0, 0x3fb5c1cb)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":6183:6208   */\n      dup4\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"test/Counter.t.sol\":495:502  counter */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"test/Counter.t.sol\":495:512  counter.setNumber */\n      0x3fb5c1cb\n      swap1\n        /* \"#utility.yul\":6156:6174   */\n      0x24\n      add\n        /* \"test/Counter.t.sol\":495:515  counter.setNumber(x) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_115\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_115:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_117\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_117:\n      pop\n      pop\n      pop\n      pop\n        /* \"test/Counter.t.sol\":525:554  assertEq(counter.number(), x) */\n      tag_118\n        /* \"test/Counter.t.sol\":534:541  counter */\n      0x1c\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"test/Counter.t.sol\":534:548  counter.number */\n      and\n      0x8381f58a\n        /* \"test/Counter.t.sol\":534:550  counter.number() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_120\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_120:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_121\n      swap2\n      swap1\n      tag_110\n      jump\t// in\n    tag_121:\n        /* \"test/Counter.t.sol\":552:553  x */\n      dup3\n        /* \"test/Counter.t.sol\":525:533  assertEq */\n      tag_111\n        /* \"test/Counter.t.sol\":525:554  assertEq(counter.number(), x) */\n      jump\t// in\n    tag_118:\n        /* \"test/Counter.t.sol\":439:561  function testFuzz_SetNumber(uint256 x) public {... */\n      pop\n      jump\t// out\n        /* \"lib/forge-std/src/StdInvariant.sol\":2738:2916  function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {... */\n    tag_48:\n        /* \"lib/forge-std/src/StdInvariant.sol\":2794:2842  FuzzSelector[] memory targetedArtifactSelectors_ */\n      0x60\n        /* \"lib/forge-std/src/StdInvariant.sol\":2883:2909  _targetedArtifactSelectors */\n      0x19\n        /* \"lib/forge-std/src/StdInvariant.sol\":2854:2909  targetedArtifactSelectors_ = _targetedArtifactSelectors */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      swap1\n    tag_123:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_85\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup4\n      mstore\n      0x01\n      dup2\n      add\n      dup1\n      sload\n      dup4\n      mload\n      dup2\n      dup8\n      mul\n      dup2\n      add\n      dup8\n      add\n      swap1\n      swap5\n      mstore\n      dup1\n      dup5\n      mstore\n      swap4\n      swap5\n      swap2\n      swap4\n      dup6\n      dup4\n      add\n      swap4\n      swap3\n      dup4\n      add\n      dup3\n      dup3\n      dup1\n      iszero\n      tag_126\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x00\n      swap1\n    tag_127:\n      dup3\n      dup3\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xe0\n      shl\n      not(sub(shl(0xe0, 0x01), 0x01))\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x04\n      add\n      swap1\n      0x20\n      dup3\n      0x03\n      add\n      div\n      swap3\n      dup4\n      add\n      swap3\n      0x01\n      sub\n      dup3\n      mul\n      swap2\n      pop\n      dup1\n      dup5\n      gt\n      tag_127\n      jumpi\n      swap1\n      pop\n    tag_126:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      mstore\n      pop\n      pop\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_123)\n        /* \"lib/forge-std/src/StdInvariant.sol\":2592:2732  function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {... */\n    tag_52:\n        /* \"lib/forge-std/src/StdInvariant.sol\":2640:2674  string[] memory targetedArtifacts_ */\n      0x60\n        /* \"lib/forge-std/src/StdInvariant.sol\":2707:2725  _targetedArtifacts */\n      0x18\n        /* \"lib/forge-std/src/StdInvariant.sol\":2686:2725  targetedArtifacts_ = _targetedArtifacts */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      swap1\n    tag_129:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_85\n      jumpi\n      dup4\n      dup3\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      dup1\n      sload\n      tag_132\n      swap1\n      tag_91\n      jump\t// in\n    tag_132:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_133\n      swap1\n      tag_91\n      jump\t// in\n    tag_133:\n      dup1\n      iszero\n      tag_134\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_135\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_134)\n    tag_135:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_136:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_136\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_134:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_129)\n        /* \"lib/forge-std/src/StdInvariant.sol\":3069:3215  function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {... */\n    tag_56:\n        /* \"lib/forge-std/src/StdInvariant.sol\":3117:3157  FuzzSelector[] memory targetedSelectors_ */\n      0x60\n        /* \"lib/forge-std/src/StdInvariant.sol\":3190:3208  _targetedSelectors */\n      0x1a\n        /* \"lib/forge-std/src/StdInvariant.sol\":3169:3208  targetedSelectors_ = _targetedSelectors */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      swap1\n    tag_138:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_85\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup4\n      mstore\n      0x01\n      dup2\n      add\n      dup1\n      sload\n      dup4\n      mload\n      dup2\n      dup8\n      mul\n      dup2\n      add\n      dup8\n      add\n      swap1\n      swap5\n      mstore\n      dup1\n      dup5\n      mstore\n      swap4\n      swap5\n      swap2\n      swap4\n      dup6\n      dup4\n      add\n      swap4\n      swap3\n      dup4\n      add\n      dup3\n      dup3\n      dup1\n      iszero\n      tag_141\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x00\n      swap1\n    tag_142:\n      dup3\n      dup3\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xe0\n      shl\n      not(sub(shl(0xe0, 0x01), 0x01))\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x04\n      add\n      swap1\n      0x20\n      dup3\n      0x03\n      add\n      div\n      swap3\n      dup4\n      add\n      swap3\n      0x01\n      sub\n      dup3\n      mul\n      swap2\n      pop\n      dup1\n      dup5\n      gt\n      tag_142\n      jumpi\n      swap1\n      pop\n    tag_141:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      mstore\n      pop\n      pop\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_138)\n        /* \"lib/forge-std/src/StdInvariant.sol\":2157:2298  function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {... */\n    tag_59:\n        /* \"lib/forge-std/src/StdInvariant.sol\":2206:2240  string[] memory excludedArtifacts_ */\n      0x60\n        /* \"lib/forge-std/src/StdInvariant.sol\":2273:2291  _excludedArtifacts */\n      0x17\n        /* \"lib/forge-std/src/StdInvariant.sol\":2252:2291  excludedArtifacts_ = _excludedArtifacts */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      swap1\n    tag_144:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_85\n      jumpi\n      dup4\n      dup3\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      dup1\n      sload\n      tag_147\n      swap1\n      tag_91\n      jump\t// in\n    tag_147:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_148\n      swap1\n      tag_91\n      jump\t// in\n    tag_148:\n      dup1\n      iszero\n      tag_149\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_150\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_149)\n    tag_150:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_151:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_151\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_149:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_144)\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1819:2403  function failed() public returns (bool) {... */\n    tag_62:\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1873:1880  _failed */\n      sload(0x07)\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1853:1857  bool */\n      0x00\n      swap1\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1873:1880  _failed */\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1869:2397  if (_failed) {... */\n      iszero\n      tag_153\n      jumpi\n      pop\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1903:1910  _failed */\n      sload(0x07)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      swap1\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1819:2403  function failed() public returns (bool) {... */\n      jump\t// out\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1869:2397  if (_failed) {... */\n    tag_153:\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1941:1958  bool globalFailed */\n      0x00\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2997:3039  0x7109709ECfa91a80626fF3989D68f67F5b1DD12D */\n      0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2985:3040  extcodesize(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D) */\n      extcodesize\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":3066:3082  hevmCodeSize > 0 */\n      iszero\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1980:2354  if (hasHEVMContext()) {... */\n      tag_157\n      jumpi\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2196:2239  abi.encode(HEVM_ADDRESS, bytes32(\"failed\")) */\n      0x40\n      dup1\n      mload\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1671:1735  address(bytes20(uint160(uint256(keccak256('hevm cheat code'))))) */\n      0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2196:2239  abi.encode(HEVM_ADDRESS, bytes32(\"failed\")) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":7149:7200   */\n      dup2\n      swap1\n      mstore\n      shl(0xd2, 0x19985a5b1959)\n        /* \"#utility.yul\":7216:7234   */\n      dup3\n      dup5\n      add\n        /* \"#utility.yul\":7209:7243   */\n      mstore\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2196:2239  abi.encode(HEVM_ADDRESS, bytes32(\"failed\")) */\n      dup3\n      mload\n      dup1\n      dup4\n      sub\n      dup5\n      add\n      dup2\n      mstore\n        /* \"#utility.yul\":7122:7140   */\n      0x60\n      dup4\n      add\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2196:2239  abi.encode(HEVM_ADDRESS, bytes32(\"failed\")) */\n      swap1\n      swap4\n      mstore\n      0x00\n      swap3\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1671:1735  address(bytes20(uint160(uint256(keccak256('hevm cheat code'))))) */\n      swap1\n      swap2\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2086:2261  abi.encodePacked(... */\n      tag_160\n      swap2\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2135:2169  keccak256(\"load(address,bytes32)\") */\n      0x667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4\n      swap2\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2086:2261  abi.encodePacked(... */\n      0x80\n      add\n      tag_161\n      jump\t// in\n    tag_160:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2047:2279  HEVM_ADDRESS.call(... */\n      tag_162\n      swap2\n      tag_163\n      jump\t// in\n    tag_162:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_166\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_165)\n    tag_166:\n      0x60\n      swap2\n      pop\n    tag_165:\n      pop\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2020:2279  (, bytes memory retdata) = HEVM_ADDRESS.call(... */\n      swap2\n      pop\n      pop\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2323:2330  retdata */\n      dup1\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2312:2339  abi.decode(retdata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_167\n      swap2\n      swap1\n      tag_168\n      jump\t// in\n    tag_167:\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2297:2339  globalFailed = abi.decode(retdata, (bool)) */\n      swap2\n      pop\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2002:2354  {... */\n      pop\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1980:2354  if (hasHEVMContext()) {... */\n    tag_157:\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2374:2386  globalFailed */\n      swap2\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1819:2403  function failed() public returns (bool) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/forge-std/src/StdInvariant.sol\":2304:2446  function excludeContracts() public view returns (address[] memory excludedContracts_) {... */\n    tag_66:\n        /* \"lib/forge-std/src/StdInvariant.sol\":2353:2388  address[] memory excludedContracts_ */\n      0x60\n        /* \"lib/forge-std/src/StdInvariant.sol\":2421:2439  _excludedContracts */\n      0x13\n        /* \"lib/forge-std/src/StdInvariant.sol\":2400:2439  excludedContracts_ = _excludedContracts */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      dup1\n      iszero\n      tag_81\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_82\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"lib/forge-std/src/StdInvariant.sol\":2304:2446  function excludeContracts() public view returns (address[] memory excludedContracts_) {... */\n      swap1\n      jump\t// out\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5209:5471  function assertEq(uint a, uint b) internal {... */\n    tag_111:\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5271:5272  b */\n      dup1\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5266:5267  a */\n      dup3\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5266:5272  a != b */\n      eq\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5262:5465  if (a != b) {... */\n      tag_180\n      jumpi\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5293:5334  log(\"Error: a == b not satisfied [uint]\") */\n      0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50\n      mload(0x40)\n      tag_174\n      swap1\n        /* \"#utility.yul\":8419:8421   */\n      0x20\n        /* \"#utility.yul\":8401:8422   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8458:8460   */\n      0x22\n        /* \"#utility.yul\":8438:8456   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8431:8461   */\n      mstore\n        /* \"#utility.yul\":8497:8531   */\n      0x4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e\n        /* \"#utility.yul\":8492:8494   */\n      0x40\n        /* \"#utility.yul\":8477:8495   */\n      dup3\n      add\n        /* \"#utility.yul\":8470:8532   */\n      mstore\n      shl(0xf0, 0x745d)\n        /* \"#utility.yul\":8563:8565   */\n      0x60\n        /* \"#utility.yul\":8548:8566   */\n      dup3\n      add\n        /* \"#utility.yul\":8541:8573   */\n      mstore\n        /* \"#utility.yul\":8605:8608   */\n      0x80\n        /* \"#utility.yul\":8590:8609   */\n      add\n      swap1\n        /* \"#utility.yul\":8217:8615   */\n      jump\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5293:5334  log(\"Error: a == b not satisfied [uint]\") */\n    tag_174:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5353:5384  log_named_uint(\"      Left\", a) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":8832:8853   */\n      dup2\n      dup2\n      mstore\n        /* \"#utility.yul\":8889:8891   */\n      0x0a\n        /* \"#utility.yul\":8869:8887   */\n      dup2\n      dup4\n      add\n        /* \"#utility.yul\":8862:8892   */\n      mstore\n      shl(0xb2, 0x0808080808081319599d)\n        /* \"#utility.yul\":8923:8925   */\n      0x60\n        /* \"#utility.yul\":8908:8926   */\n      dup3\n      add\n        /* \"#utility.yul\":8901:8941   */\n      mstore\n        /* \"#utility.yul\":9008:9012   */\n      0x20\n        /* \"#utility.yul\":8993:9013   */\n      dup2\n      add\n        /* \"#utility.yul\":8986:9022   */\n      dup5\n      swap1\n      mstore\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5353:5384  log_named_uint(\"      Left\", a) */\n      swap1\n      mload\n      0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8\n      swap2\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":8973:8976   */\n      0x80\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5353:5384  log_named_uint(\"      Left\", a) */\n      add\n      swap1\n      log1\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5403:5434  log_named_uint(\"     Right\", b) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":9245:9266   */\n      dup2\n      dup2\n      mstore\n        /* \"#utility.yul\":9302:9304   */\n      0x0a\n        /* \"#utility.yul\":9282:9300   */\n      dup2\n      dup4\n      add\n        /* \"#utility.yul\":9275:9305   */\n      mstore\n      shl(0xb2, 0x0808080808149a59da1d)\n        /* \"#utility.yul\":9336:9338   */\n      0x60\n        /* \"#utility.yul\":9321:9339   */\n      dup3\n      add\n        /* \"#utility.yul\":9314:9354   */\n      mstore\n        /* \"#utility.yul\":9421:9425   */\n      0x20\n        /* \"#utility.yul\":9406:9426   */\n      dup2\n      add\n        /* \"#utility.yul\":9399:9435   */\n      dup4\n      swap1\n      mstore\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5403:5434  log_named_uint(\"     Right\", b) */\n      swap1\n      mload\n      0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8\n      swap2\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":9386:9389   */\n      0x80\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5403:5434  log_named_uint(\"     Right\", b) */\n      add\n      swap1\n      log1\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5448:5454  fail() */\n      tag_180\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5448:5452  fail */\n      tag_181\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5448:5454  fail() */\n      jump\t// in\n    tag_180:\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":5209:5471  function assertEq(uint a, uint b) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2409:2841  function fail() internal virtual {... */\n    tag_181:\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2997:3039  0x7109709ECfa91a80626fF3989D68f67F5b1DD12D */\n      0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2985:3040  extcodesize(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D) */\n      extcodesize\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":3066:3082  hevmCodeSize > 0 */\n      iszero\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2452:2811  if (hasHEVMContext()) {... */\n      tag_185\n      jumpi\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2652:2719  abi.encode(HEVM_ADDRESS, bytes32(\"failed\"), bytes32(uint256(0x01))) */\n      0x40\n      dup1\n      mload\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1671:1735  address(bytes20(uint160(uint256(keccak256('hevm cheat code'))))) */\n      0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2652:2719  abi.encode(HEVM_ADDRESS, bytes32(\"failed\"), bytes32(uint256(0x01))) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":9648:9699   */\n      dup2\n      swap1\n      mstore\n      shl(0xd2, 0x19985a5b1959)\n        /* \"#utility.yul\":9715:9733   */\n      swap3\n      dup3\n      add\n        /* \"#utility.yul\":9708:9742   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2712:2716  0x01 */\n      0x01\n        /* \"#utility.yul\":9758:9776   */\n      0x60\n      dup3\n      add\n        /* \"#utility.yul\":9751:9785   */\n      mstore\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2489:2500  bool status */\n      0x00\n      swap2\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":1671:1735  address(bytes20(uint160(uint256(keccak256('hevm cheat code'))))) */\n      swap1\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2586:2629  keccak256(\"store(address,bytes32,bytes32)\") */\n      0x70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc4\n      swap1\n        /* \"#utility.yul\":9621:9639   */\n      0x80\n      add\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2652:2719  abi.encode(HEVM_ADDRESS, bytes32(\"failed\"), bytes32(uint256(0x01))) */\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2541:2737  abi.encodePacked(... */\n      tag_188\n      swap3\n      swap2\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2652:2719  abi.encode(HEVM_ADDRESS, bytes32(\"failed\"), bytes32(uint256(0x01))) */\n      0x20\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2541:2737  abi.encodePacked(... */\n      add\n      tag_161\n      jump\t// in\n    tag_188:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2506:2751  HEVM_ADDRESS.call(... */\n      tag_189\n      swap2\n      tag_163\n      jump\t// in\n    tag_189:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_192\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_191)\n    tag_192:\n      0x60\n      swap2\n      pop\n    tag_191:\n      pop\n      pop\n      pop\n      pop\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2452:2811  if (hasHEVMContext()) {... */\n    tag_185:\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2820:2827  _failed */\n      0x07\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2820:2834  _failed = true */\n      dup1\n      sload\n      not(0xff00)\n      and\n      0x0100\n      or\n      swap1\n      sstore\n        /* \"lib/forge-std/lib/ds-test/src/test.sol\":2409:2841  function fail() internal virtual {... */\n      jump\t// out\n    tag_73:\n      dataSize(sub_0)\n      dup1\n      dataOffset(sub_0)\n      dup4\n      codecopy\n      add\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":14:672   */\n    tag_26:\n        /* \"#utility.yul\":185:187   */\n      0x20\n        /* \"#utility.yul\":237:258   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":307:320   */\n      dup3\n      mload\n        /* \"#utility.yul\":210:228   */\n      dup3\n      dup3\n      add\n        /* \"#utility.yul\":329:351   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":156:160   */\n      0x00\n      swap2\n        /* \"#utility.yul\":185:187   */\n      swap1\n        /* \"#utility.yul\":408:423   */\n      dup5\n      dup3\n      add\n      swap1\n        /* \"#utility.yul\":382:384   */\n      0x40\n        /* \"#utility.yul\":367:385   */\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":156:160   */\n      dup5\n        /* \"#utility.yul\":451:646   */\n    tag_196:\n        /* \"#utility.yul\":465:471   */\n      dup2\n        /* \"#utility.yul\":462:463   */\n      dup2\n        /* \"#utility.yul\":459:472   */\n      lt\n        /* \"#utility.yul\":451:646   */\n      iszero\n      tag_198\n      jumpi\n        /* \"#utility.yul\":530:543   */\n      dup4\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":526:565   */\n      and\n        /* \"#utility.yul\":514:566   */\n      dup4\n      mstore\n        /* \"#utility.yul\":621:636   */\n      swap3\n      dup5\n      add\n      swap3\n        /* \"#utility.yul\":586:598   */\n      swap2\n      dup5\n      add\n      swap2\n        /* \"#utility.yul\":562:563   */\n      0x01\n        /* \"#utility.yul\":480:489   */\n      add\n        /* \"#utility.yul\":451:646   */\n      jump(tag_196)\n    tag_198:\n      pop\n        /* \"#utility.yul\":663:666   */\n      swap1\n      swap7\n        /* \"#utility.yul\":14:672   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":677:927   */\n    tag_193:\n        /* \"#utility.yul\":762:763   */\n      0x00\n        /* \"#utility.yul\":772:885   */\n    tag_200:\n        /* \"#utility.yul\":786:792   */\n      dup4\n        /* \"#utility.yul\":783:784   */\n      dup2\n        /* \"#utility.yul\":780:793   */\n      lt\n        /* \"#utility.yul\":772:885   */\n      iszero\n      tag_202\n      jumpi\n        /* \"#utility.yul\":862:873   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":856:874   */\n      mload\n        /* \"#utility.yul\":843:854   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":836:875   */\n      mstore\n        /* \"#utility.yul\":808:810   */\n      0x20\n        /* \"#utility.yul\":801:811   */\n      add\n        /* \"#utility.yul\":772:885   */\n      jump(tag_200)\n    tag_202:\n      pop\n      pop\n        /* \"#utility.yul\":919:920   */\n      0x00\n        /* \"#utility.yul\":901:917   */\n      swap2\n      add\n        /* \"#utility.yul\":894:921   */\n      mstore\n        /* \"#utility.yul\":677:927   */\n      jump\t// out\n        /* \"#utility.yul\":932:2831   */\n    tag_30:\n        /* \"#utility.yul\":1136:1140   */\n      0x00\n        /* \"#utility.yul\":1165:1167   */\n      0x20\n        /* \"#utility.yul\":1205:1207   */\n      dup1\n        /* \"#utility.yul\":1194:1203   */\n      dup4\n        /* \"#utility.yul\":1190:1208   */\n      add\n        /* \"#utility.yul\":1235:1237   */\n      dup2\n        /* \"#utility.yul\":1224:1233   */\n      dup5\n        /* \"#utility.yul\":1217:1238   */\n      mstore\n        /* \"#utility.yul\":1258:1264   */\n      dup1\n        /* \"#utility.yul\":1293:1299   */\n      dup6\n        /* \"#utility.yul\":1287:1300   */\n      mload\n        /* \"#utility.yul\":1324:1330   */\n      dup1\n        /* \"#utility.yul\":1316:1322   */\n      dup4\n        /* \"#utility.yul\":1309:1331   */\n      mstore\n        /* \"#utility.yul\":1362:1364   */\n      0x40\n        /* \"#utility.yul\":1351:1360   */\n      dup7\n        /* \"#utility.yul\":1347:1365   */\n      add\n        /* \"#utility.yul\":1340:1365   */\n      swap2\n      pop\n        /* \"#utility.yul\":1424:1426   */\n      0x40\n        /* \"#utility.yul\":1414:1420   */\n      dup2\n        /* \"#utility.yul\":1411:1412   */\n      0x05\n        /* \"#utility.yul\":1407:1421   */\n      shl\n        /* \"#utility.yul\":1396:1405   */\n      dup8\n        /* \"#utility.yul\":1392:1422   */\n      add\n        /* \"#utility.yul\":1388:1427   */\n      add\n        /* \"#utility.yul\":1374:1427   */\n      swap3\n      pop\n        /* \"#utility.yul\":1462:1464   */\n      dup4\n        /* \"#utility.yul\":1454:1460   */\n      dup8\n        /* \"#utility.yul\":1450:1465   */\n      add\n        /* \"#utility.yul\":1483:1484   */\n      0x00\n        /* \"#utility.yul\":1493:2802   */\n    tag_204:\n        /* \"#utility.yul\":1507:1513   */\n      dup3\n        /* \"#utility.yul\":1504:1505   */\n      dup2\n        /* \"#utility.yul\":1501:1514   */\n      lt\n        /* \"#utility.yul\":1493:2802   */\n      iszero\n      tag_206\n      jumpi\n      not(0x3f)\n        /* \"#utility.yul\":1572:1594   */\n      dup9\n      dup7\n      sub\n        /* \"#utility.yul\":1568:1604   */\n      add\n        /* \"#utility.yul\":1556:1605   */\n      dup5\n      mstore\n        /* \"#utility.yul\":1628:1641   */\n      dup2\n      mload\n        /* \"#utility.yul\":1715:1724   */\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1711:1746   */\n      and\n        /* \"#utility.yul\":1696:1747   */\n      dup7\n      mstore\n        /* \"#utility.yul\":1786:1797   */\n      dup7\n      add\n        /* \"#utility.yul\":1780:1798   */\n      mload\n        /* \"#utility.yul\":1680:1682   */\n      0x40\n        /* \"#utility.yul\":1818:1833   */\n      dup8\n      dup8\n      add\n        /* \"#utility.yul\":1811:1838   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":1899:1918   */\n      dup2\n      mload\n        /* \"#utility.yul\":1668:1683   */\n      swap1\n      dup8\n      add\n        /* \"#utility.yul\":1931:1955   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":2111:2132   */\n      swap1\n      dup8\n      add\n      swap1\n        /* \"#utility.yul\":1978:1980   */\n      0x60\n        /* \"#utility.yul\":2064:2065   */\n      0x05\n        /* \"#utility.yul\":2060:2076   */\n      dup3\n      swap1\n      shl\n        /* \"#utility.yul\":2048:2077   */\n      dup9\n      add\n        /* \"#utility.yul\":2044:2082   */\n      dup2\n      add\n      swap2\n        /* \"#utility.yul\":2002:2017   */\n      swap1\n      dup9\n      add\n      swap1\n        /* \"#utility.yul\":2156:2157   */\n      0x00\n        /* \"#utility.yul\":2170:2693   */\n    tag_207:\n        /* \"#utility.yul\":2186:2194   */\n      dup2\n        /* \"#utility.yul\":2181:2184   */\n      dup2\n        /* \"#utility.yul\":2178:2195   */\n      lt\n        /* \"#utility.yul\":2170:2693   */\n      iszero\n      tag_209\n      jumpi\n        /* \"#utility.yul\":2267:2286   */\n      dup10\n      dup5\n      sub\n      not(0x5f)\n        /* \"#utility.yul\":2263:2296   */\n      add\n        /* \"#utility.yul\":2249:2297   */\n      dup4\n      mstore\n        /* \"#utility.yul\":2324:2339   */\n      dup5\n      mload\n        /* \"#utility.yul\":2372:2381   */\n      dup1\n      mload\n        /* \"#utility.yul\":2398:2422   */\n      dup1\n      dup7\n      mstore\n        /* \"#utility.yul\":2439:2513   */\n      tag_210\n        /* \"#utility.yul\":2372:2381   */\n      dup2\n        /* \"#utility.yul\":2487:2502   */\n      dup15\n      dup9\n      add\n        /* \"#utility.yul\":2474:2485   */\n      dup16\n      dup6\n      add\n        /* \"#utility.yul\":2439:2513   */\n      tag_193\n      jump\t// in\n    tag_210:\n        /* \"#utility.yul\":2622:2639   */\n      swap6\n      dup13\n      add\n      swap6\n        /* \"#utility.yul\":2583:2585   */\n      0x1f\n        /* \"#utility.yul\":2560:2577   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2556:2587   */\n      and\n        /* \"#utility.yul\":2544:2588   */\n      swap5\n      swap1\n      swap5\n      add\n        /* \"#utility.yul\":2540:2593   */\n      dup12\n      add\n      swap4\n      pop\n        /* \"#utility.yul\":2665:2679   */\n      swap2\n      dup11\n      add\n      swap2\n        /* \"#utility.yul\":2214:2215   */\n      0x01\n        /* \"#utility.yul\":2205:2216   */\n      add\n        /* \"#utility.yul\":2170:2693   */\n      jump(tag_207)\n    tag_209:\n      pop\n        /* \"#utility.yul\":2716:2722   */\n      swap2\n      swap8\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2780:2792   */\n      swap4\n      dup7\n      add\n      swap4\n      pop\n        /* \"#utility.yul\":2745:2760   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":1529:1530   */\n      0x01\n        /* \"#utility.yul\":1522:1531   */\n      add\n        /* \"#utility.yul\":1493:2802   */\n      jump(tag_204)\n    tag_206:\n      pop\n        /* \"#utility.yul\":2819:2825   */\n      swap3\n      swap8\n        /* \"#utility.yul\":932:2831   */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2836:3016   */\n    tag_41:\n        /* \"#utility.yul\":2895:2901   */\n      0x00\n        /* \"#utility.yul\":2948:2950   */\n      0x20\n        /* \"#utility.yul\":2936:2945   */\n      dup3\n        /* \"#utility.yul\":2927:2934   */\n      dup5\n        /* \"#utility.yul\":2923:2946   */\n      sub\n        /* \"#utility.yul\":2919:2951   */\n      slt\n        /* \"#utility.yul\":2916:2968   */\n      iszero\n      tag_212\n      jumpi\n        /* \"#utility.yul\":2964:2965   */\n      0x00\n        /* \"#utility.yul\":2961:2962   */\n      dup1\n        /* \"#utility.yul\":2954:2966   */\n      revert\n        /* \"#utility.yul\":2916:2968   */\n    tag_212:\n      pop\n        /* \"#utility.yul\":2987:3010   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2836:3016   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3246:4813   */\n    tag_50:\n        /* \"#utility.yul\":3448:3452   */\n      0x00\n        /* \"#utility.yul\":3477:3479   */\n      0x20\n        /* \"#utility.yul\":3517:3519   */\n      dup1\n        /* \"#utility.yul\":3506:3515   */\n      dup4\n        /* \"#utility.yul\":3502:3520   */\n      add\n        /* \"#utility.yul\":3547:3549   */\n      dup2\n        /* \"#utility.yul\":3536:3545   */\n      dup5\n        /* \"#utility.yul\":3529:3550   */\n      mstore\n        /* \"#utility.yul\":3570:3576   */\n      dup1\n        /* \"#utility.yul\":3605:3611   */\n      dup6\n        /* \"#utility.yul\":3599:3612   */\n      mload\n        /* \"#utility.yul\":3636:3642   */\n      dup1\n        /* \"#utility.yul\":3628:3634   */\n      dup4\n        /* \"#utility.yul\":3621:3643   */\n      mstore\n        /* \"#utility.yul\":3662:3664   */\n      0x40\n        /* \"#utility.yul\":3652:3664   */\n      swap3\n      pop\n        /* \"#utility.yul\":3695:3697   */\n      0x40\n        /* \"#utility.yul\":3684:3693   */\n      dup7\n        /* \"#utility.yul\":3680:3698   */\n      add\n        /* \"#utility.yul\":3673:3698   */\n      swap2\n      pop\n        /* \"#utility.yul\":3757:3759   */\n      0x40\n        /* \"#utility.yul\":3747:3753   */\n      dup2\n        /* \"#utility.yul\":3744:3745   */\n      0x05\n        /* \"#utility.yul\":3740:3754   */\n      shl\n        /* \"#utility.yul\":3729:3738   */\n      dup8\n        /* \"#utility.yul\":3725:3755   */\n      add\n        /* \"#utility.yul\":3721:3760   */\n      add\n        /* \"#utility.yul\":3795:3797   */\n      dup5\n        /* \"#utility.yul\":3787:3793   */\n      dup9\n        /* \"#utility.yul\":3783:3798   */\n      add\n        /* \"#utility.yul\":3816:3817   */\n      0x00\n        /* \"#utility.yul\":3837:3838   */\n      dup1\n        /* \"#utility.yul\":3847:4784   */\n    tag_215:\n        /* \"#utility.yul\":3863:3869   */\n      dup5\n        /* \"#utility.yul\":3858:3861   */\n      dup2\n        /* \"#utility.yul\":3855:3870   */\n      lt\n        /* \"#utility.yul\":3847:4784   */\n      iszero\n      tag_217\n      jumpi\n        /* \"#utility.yul\":3932:3954   */\n      dup10\n      dup5\n      sub\n      not(0x3f)\n        /* \"#utility.yul\":3928:3964   */\n      add\n        /* \"#utility.yul\":3916:3965   */\n      dup7\n      mstore\n        /* \"#utility.yul\":3988:4001   */\n      dup3\n      mload\n        /* \"#utility.yul\":4075:4084   */\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4071:4106   */\n      and\n        /* \"#utility.yul\":4056:4107   */\n      dup6\n      mstore\n        /* \"#utility.yul\":4146:4157   */\n      dup9\n      add\n        /* \"#utility.yul\":4140:4158   */\n      mload\n        /* \"#utility.yul\":4178:4193   */\n      dup9\n      dup6\n      add\n        /* \"#utility.yul\":4171:4198   */\n      dup9\n      swap1\n      mstore\n        /* \"#utility.yul\":4259:4278   */\n      dup1\n      mload\n        /* \"#utility.yul\":4028:4043   */\n      dup9\n      dup7\n      add\n        /* \"#utility.yul\":4291:4315   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":4381:4402   */\n      swap1\n      dup10\n      add\n      swap1\n        /* \"#utility.yul\":4426:4427   */\n      dup4\n      swap1\n        /* \"#utility.yul\":4349:4351   */\n      0x60\n        /* \"#utility.yul\":4337:4352   */\n      dup8\n      add\n      swap1\n        /* \"#utility.yul\":4440:4676   */\n    tag_218:\n        /* \"#utility.yul\":4456:4464   */\n      dup1\n        /* \"#utility.yul\":4451:4454   */\n      dup4\n        /* \"#utility.yul\":4448:4465   */\n      lt\n        /* \"#utility.yul\":4440:4676   */\n      iszero\n      tag_220\n      jumpi\n        /* \"#utility.yul\":4537:4552   */\n      dup4\n      mload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":4533:4575   */\n      and\n        /* \"#utility.yul\":4519:4576   */\n      dup3\n      mstore\n        /* \"#utility.yul\":4645:4662   */\n      swap3\n      dup12\n      add\n      swap3\n        /* \"#utility.yul\":4484:4485   */\n      0x01\n        /* \"#utility.yul\":4475:4486   */\n      swap3\n      swap1\n      swap3\n      add\n      swap2\n        /* \"#utility.yul\":4602:4616   */\n      swap1\n      dup12\n      add\n      swap1\n        /* \"#utility.yul\":4440:4676   */\n      jump(tag_218)\n    tag_220:\n      pop\n        /* \"#utility.yul\":4762:4774   */\n      swap8\n      dup11\n      add\n      swap8\n        /* \"#utility.yul\":4699:4704   */\n      swap6\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":4727:4742   */\n      swap2\n      dup8\n      add\n      swap2\n        /* \"#utility.yul\":3889:3890   */\n      0x01\n        /* \"#utility.yul\":3880:3891   */\n      add\n        /* \"#utility.yul\":3847:4784   */\n      jump(tag_215)\n    tag_217:\n      pop\n        /* \"#utility.yul\":4801:4807   */\n      swap2\n      swap10\n        /* \"#utility.yul\":3246:4813   */\n      swap9\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4818:5832   */\n    tag_54:\n        /* \"#utility.yul\":4980:4984   */\n      0x00\n        /* \"#utility.yul\":5009:5011   */\n      0x20\n        /* \"#utility.yul\":5049:5051   */\n      dup1\n        /* \"#utility.yul\":5038:5047   */\n      dup4\n        /* \"#utility.yul\":5034:5052   */\n      add\n        /* \"#utility.yul\":5079:5081   */\n      dup2\n        /* \"#utility.yul\":5068:5077   */\n      dup5\n        /* \"#utility.yul\":5061:5082   */\n      mstore\n        /* \"#utility.yul\":5102:5108   */\n      dup1\n        /* \"#utility.yul\":5137:5143   */\n      dup6\n        /* \"#utility.yul\":5131:5144   */\n      mload\n        /* \"#utility.yul\":5168:5174   */\n      dup1\n        /* \"#utility.yul\":5160:5166   */\n      dup4\n        /* \"#utility.yul\":5153:5175   */\n      mstore\n        /* \"#utility.yul\":5206:5208   */\n      0x40\n        /* \"#utility.yul\":5195:5204   */\n      dup7\n        /* \"#utility.yul\":5191:5209   */\n      add\n        /* \"#utility.yul\":5184:5209   */\n      swap2\n      pop\n        /* \"#utility.yul\":5268:5270   */\n      0x40\n        /* \"#utility.yul\":5258:5264   */\n      dup2\n        /* \"#utility.yul\":5255:5256   */\n      0x05\n        /* \"#utility.yul\":5251:5265   */\n      shl\n        /* \"#utility.yul\":5240:5249   */\n      dup8\n        /* \"#utility.yul\":5236:5266   */\n      add\n        /* \"#utility.yul\":5232:5271   */\n      add\n        /* \"#utility.yul\":5218:5271   */\n      swap3\n      pop\n        /* \"#utility.yul\":5306:5308   */\n      dup4\n        /* \"#utility.yul\":5298:5304   */\n      dup8\n        /* \"#utility.yul\":5294:5309   */\n      add\n        /* \"#utility.yul\":5327:5328   */\n      0x00\n        /* \"#utility.yul\":5337:5803   */\n    tag_222:\n        /* \"#utility.yul\":5351:5357   */\n      dup3\n        /* \"#utility.yul\":5348:5349   */\n      dup2\n        /* \"#utility.yul\":5345:5358   */\n      lt\n        /* \"#utility.yul\":5337:5803   */\n      iszero\n      tag_206\n      jumpi\n        /* \"#utility.yul\":5416:5438   */\n      dup8\n      dup6\n      sub\n      not(0x3f)\n        /* \"#utility.yul\":5412:5448   */\n      add\n        /* \"#utility.yul\":5400:5449   */\n      dup5\n      mstore\n        /* \"#utility.yul\":5472:5485   */\n      dup2\n      mload\n        /* \"#utility.yul\":5514:5523   */\n      dup1\n      mload\n        /* \"#utility.yul\":5536:5560   */\n      dup1\n      dup8\n      mstore\n        /* \"#utility.yul\":5573:5647   */\n      tag_225\n        /* \"#utility.yul\":5514:5523   */\n      dup2\n        /* \"#utility.yul\":5621:5636   */\n      dup10\n      dup10\n      add\n        /* \"#utility.yul\":5608:5619   */\n      dup11\n      dup6\n      add\n        /* \"#utility.yul\":5573:5647   */\n      tag_193\n      jump\t// in\n    tag_225:\n        /* \"#utility.yul\":5713:5715   */\n      0x1f\n        /* \"#utility.yul\":5690:5707   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":5686:5717   */\n      and\n        /* \"#utility.yul\":5674:5718   */\n      swap6\n      swap1\n      swap6\n      add\n        /* \"#utility.yul\":5670:5723   */\n      dup7\n      add\n      swap5\n      pop\n        /* \"#utility.yul\":5781:5793   */\n      swap3\n      dup6\n      add\n      swap3\n        /* \"#utility.yul\":5746:5761   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":5373:5374   */\n      0x01\n        /* \"#utility.yul\":5366:5375   */\n      add\n        /* \"#utility.yul\":5337:5803   */\n      jump(tag_222)\n        /* \"#utility.yul\":6219:6599   */\n    tag_91:\n        /* \"#utility.yul\":6298:6299   */\n      0x01\n        /* \"#utility.yul\":6294:6306   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":6341:6353   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":6362:6423   */\n      tag_229\n      jumpi\n        /* \"#utility.yul\":6416:6420   */\n      0x7f\n        /* \"#utility.yul\":6408:6414   */\n      dup3\n        /* \"#utility.yul\":6404:6421   */\n      and\n        /* \"#utility.yul\":6394:6421   */\n      swap2\n      pop\n        /* \"#utility.yul\":6362:6423   */\n    tag_229:\n        /* \"#utility.yul\":6469:6471   */\n      0x20\n        /* \"#utility.yul\":6461:6467   */\n      dup3\n        /* \"#utility.yul\":6458:6472   */\n      lt\n        /* \"#utility.yul\":6438:6456   */\n      dup2\n        /* \"#utility.yul\":6435:6473   */\n      sub\n        /* \"#utility.yul\":6432:6593   */\n      tag_230\n      jumpi\n        /* \"#utility.yul\":6515:6525   */\n      0x4e487b71\n        /* \"#utility.yul\":6510:6513   */\n      0xe0\n        /* \"#utility.yul\":6506:6526   */\n      shl\n        /* \"#utility.yul\":6503:6504   */\n      0x00\n        /* \"#utility.yul\":6496:6527   */\n      mstore\n        /* \"#utility.yul\":6550:6554   */\n      0x22\n        /* \"#utility.yul\":6547:6548   */\n      0x04\n        /* \"#utility.yul\":6540:6555   */\n      mstore\n        /* \"#utility.yul\":6578:6582   */\n      0x24\n        /* \"#utility.yul\":6575:6576   */\n      0x00\n        /* \"#utility.yul\":6568:6583   */\n      revert\n        /* \"#utility.yul\":6432:6593   */\n    tag_230:\n      pop\n        /* \"#utility.yul\":6219:6599   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6604:6788   */\n    tag_110:\n        /* \"#utility.yul\":6674:6680   */\n      0x00\n        /* \"#utility.yul\":6727:6729   */\n      0x20\n        /* \"#utility.yul\":6715:6724   */\n      dup3\n        /* \"#utility.yul\":6706:6713   */\n      dup5\n        /* \"#utility.yul\":6702:6725   */\n      sub\n        /* \"#utility.yul\":6698:6730   */\n      slt\n        /* \"#utility.yul\":6695:6747   */\n      iszero\n      tag_232\n      jumpi\n        /* \"#utility.yul\":6743:6744   */\n      0x00\n        /* \"#utility.yul\":6740:6741   */\n      dup1\n        /* \"#utility.yul\":6733:6745   */\n      revert\n        /* \"#utility.yul\":6695:6747   */\n    tag_232:\n      pop\n        /* \"#utility.yul\":6766:6782   */\n      mload\n      swap2\n        /* \"#utility.yul\":6604:6788   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7254:7638   */\n    tag_161:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":7439:7472   */\n      dup4\n      and\n        /* \"#utility.yul\":7427:7473   */\n      dup2\n      mstore\n        /* \"#utility.yul\":7496:7509   */\n      dup2\n      mload\n        /* \"#utility.yul\":7409:7412   */\n      0x00\n      swap1\n        /* \"#utility.yul\":7518:7592   */\n      tag_236\n        /* \"#utility.yul\":7496:7509   */\n      dup2\n        /* \"#utility.yul\":7581:7582   */\n      0x04\n        /* \"#utility.yul\":7572:7583   */\n      dup6\n      add\n        /* \"#utility.yul\":7565:7569   */\n      0x20\n        /* \"#utility.yul\":7553:7570   */\n      dup8\n      add\n        /* \"#utility.yul\":7518:7592   */\n      tag_193\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":7612:7628   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":7630:7631   */\n      0x04\n        /* \"#utility.yul\":7608:7632   */\n      add\n      swap4\n        /* \"#utility.yul\":7254:7638   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7643:7930   */\n    tag_163:\n        /* \"#utility.yul\":7772:7775   */\n      0x00\n        /* \"#utility.yul\":7810:7816   */\n      dup3\n        /* \"#utility.yul\":7804:7817   */\n      mload\n        /* \"#utility.yul\":7826:7892   */\n      tag_238\n        /* \"#utility.yul\":7885:7891   */\n      dup2\n        /* \"#utility.yul\":7880:7883   */\n      dup5\n        /* \"#utility.yul\":7873:7877   */\n      0x20\n        /* \"#utility.yul\":7865:7871   */\n      dup8\n        /* \"#utility.yul\":7861:7878   */\n      add\n        /* \"#utility.yul\":7826:7892   */\n      tag_193\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":7908:7924   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":7643:7930   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7935:8212   */\n    tag_168:\n        /* \"#utility.yul\":8002:8008   */\n      0x00\n        /* \"#utility.yul\":8055:8057   */\n      0x20\n        /* \"#utility.yul\":8043:8052   */\n      dup3\n        /* \"#utility.yul\":8034:8041   */\n      dup5\n        /* \"#utility.yul\":8030:8053   */\n      sub\n        /* \"#utility.yul\":8026:8058   */\n      slt\n        /* \"#utility.yul\":8023:8075   */\n      iszero\n      tag_240\n      jumpi\n        /* \"#utility.yul\":8071:8072   */\n      0x00\n        /* \"#utility.yul\":8068:8069   */\n      dup1\n        /* \"#utility.yul\":8061:8073   */\n      revert\n        /* \"#utility.yul\":8023:8075   */\n    tag_240:\n        /* \"#utility.yul\":8103:8112   */\n      dup2\n        /* \"#utility.yul\":8097:8113   */\n      mload\n        /* \"#utility.yul\":8156:8161   */\n      dup1\n        /* \"#utility.yul\":8149:8162   */\n      iszero\n        /* \"#utility.yul\":8142:8163   */\n      iszero\n        /* \"#utility.yul\":8135:8140   */\n      dup2\n        /* \"#utility.yul\":8132:8164   */\n      eq\n        /* \"#utility.yul\":8122:8182   */\n      tag_241\n      jumpi\n        /* \"#utility.yul\":8178:8179   */\n      0x00\n        /* \"#utility.yul\":8175:8176   */\n      dup1\n        /* \"#utility.yul\":8168:8180   */\n      revert\n        /* \"#utility.yul\":8122:8182   */\n    tag_241:\n        /* \"#utility.yul\":8201:8206   */\n      swap4\n        /* \"#utility.yul\":7935:8212   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n\n    sub_0: assembly {\n            /* \"src/Counter.sol\":65:318  contract Counter {... */\n          mstore(0x40, 0x80)\n          callvalue\n          dup1\n          iszero\n          tag_1\n          jumpi\n          0x00\n          dup1\n          revert\n        tag_1:\n          pop\n          dataSize(sub_0)\n          dup1\n          dataOffset(sub_0)\n          0x00\n          codecopy\n          0x00\n          return\n        stop\n\n        sub_0: assembly {\n                /* \"src/Counter.sol\":65:318  contract Counter {... */\n              mstore(0x40, 0x80)\n              callvalue\n              dup1\n              iszero\n              tag_1\n              jumpi\n              0x00\n              dup1\n              revert\n            tag_1:\n              pop\n              jumpi(tag_2, lt(calldatasize, 0x04))\n              shr(0xe0, calldataload(0x00))\n              dup1\n              0x3fb5c1cb\n              eq\n              tag_3\n              jumpi\n              dup1\n              0x8381f58a\n              eq\n              tag_4\n              jumpi\n              dup1\n              0x90c52443\n              eq\n              tag_5\n              jumpi\n              dup1\n              0xd09de08a\n              eq\n              tag_6\n              jumpi\n              dup1\n              0xd6980dfd\n              eq\n              tag_7\n              jumpi\n            tag_2:\n              0x00\n              dup1\n              revert\n                /* \"src/Counter.sol\":177:257  function setNumber(uint256 newNumber) public {... */\n            tag_3:\n              tag_8\n              tag_9\n              calldatasize\n              0x04\n              tag_10\n              jump\t// in\n            tag_9:\n                /* \"src/Counter.sol\":232:238  number */\n              0x00\n                /* \"src/Counter.sol\":232:250  number = newNumber */\n              sstore\n                /* \"src/Counter.sol\":177:257  function setNumber(uint256 newNumber) public {... */\n              jump\n            tag_8:\n              stop\n                /* \"src/Counter.sol\":88:109  uint256 public number */\n            tag_4:\n              tag_12\n              sload(0x00)\n              dup2\n              jump\n            tag_12:\n              mload(0x40)\n                /* \"#utility.yul\":345:370   */\n              swap1\n              dup2\n              mstore\n                /* \"#utility.yul\":333:335   */\n              0x20\n                /* \"#utility.yul\":318:336   */\n              add\n                /* \"src/Counter.sol\":88:109  uint256 public number */\n              mload(0x40)\n              dup1\n              swap2\n              sub\n              swap1\n              return\n                /* \"src/Counter.sol\":115:137  uint256 public number2 */\n            tag_5:\n              tag_12\n              sload(0x01)\n              dup2\n              jump\n                /* \"src/Counter.sol\":263:316  function increment() public {... */\n            tag_6:\n              tag_8\n              tag_20\n              jump\t// in\n                /* \"src/Counter.sol\":143:165  uint256 public number3 */\n            tag_7:\n              tag_12\n              sload(0x02)\n              dup2\n              jump\n                /* \"src/Counter.sol\":263:316  function increment() public {... */\n            tag_20:\n                /* \"src/Counter.sol\":301:307  number */\n              0x00\n                /* \"src/Counter.sol\":301:309  number++ */\n              dup1\n              sload\n              swap1\n                /* \"src/Counter.sol\":301:307  number */\n              dup1\n                /* \"src/Counter.sol\":301:309  number++ */\n              tag_26\n              dup4\n              tag_27\n              jump\t// in\n            tag_26:\n              swap2\n              swap1\n              pop\n              sstore\n              pop\n                /* \"src/Counter.sol\":263:316  function increment() public {... */\n              jump\t// out\n                /* \"#utility.yul\":14:194   */\n            tag_10:\n                /* \"#utility.yul\":73:79   */\n              0x00\n                /* \"#utility.yul\":126:128   */\n              0x20\n                /* \"#utility.yul\":114:123   */\n              dup3\n                /* \"#utility.yul\":105:112   */\n              dup5\n                /* \"#utility.yul\":101:124   */\n              sub\n                /* \"#utility.yul\":97:129   */\n              slt\n                /* \"#utility.yul\":94:146   */\n              iszero\n              tag_30\n              jumpi\n                /* \"#utility.yul\":142:143   */\n              0x00\n                /* \"#utility.yul\":139:140   */\n              dup1\n                /* \"#utility.yul\":132:144   */\n              revert\n                /* \"#utility.yul\":94:146   */\n            tag_30:\n              pop\n                /* \"#utility.yul\":165:188   */\n              calldataload\n              swap2\n                /* \"#utility.yul\":14:194   */\n              swap1\n              pop\n              jump\t// out\n                /* \"#utility.yul\":381:613   */\n            tag_27:\n                /* \"#utility.yul\":420:423   */\n              0x00\n                /* \"#utility.yul\":441:458   */\n              0x01\n              dup3\n              add\n                /* \"#utility.yul\":438:578   */\n              tag_33\n              jumpi\n                /* \"#utility.yul\":500:510   */\n              0x4e487b71\n                /* \"#utility.yul\":495:498   */\n              0xe0\n                /* \"#utility.yul\":491:511   */\n              shl\n                /* \"#utility.yul\":488:489   */\n              0x00\n                /* \"#utility.yul\":481:512   */\n              mstore\n                /* \"#utility.yul\":535:539   */\n              0x11\n                /* \"#utility.yul\":532:533   */\n              0x04\n                /* \"#utility.yul\":525:540   */\n              mstore\n                /* \"#utility.yul\":563:567   */\n              0x24\n                /* \"#utility.yul\":560:561   */\n              0x00\n                /* \"#utility.yul\":553:568   */\n              revert\n                /* \"#utility.yul\":438:578   */\n            tag_33:\n              pop\n                /* \"#utility.yul\":605:606   */\n              0x01\n                /* \"#utility.yul\":594:607   */\n              add\n              swap1\n                /* \"#utility.yul\":381:613   */\n              jump\t// out\n\n            auxdata: 0xa26469706673582212208ea880a17eb711668fc8eaac9682e4e6bbec4f126095a1335c80df64d2d9569964736f6c63430008170033\n        }\n    }\n\n    auxdata: 0xa2646970667358221220e38b940598f45d622767b92fb4f090b69eed56d1c63421bcf633df518ecd350364736f6c63430008170033\n}\n","methodIdentifiers":{"IS_TEST()":"fa7626d4","counter()":"61bc221a","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSenders()":"1ed7831c","failed()":"ba414fa6","setUp()":"0a9254e4","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23","testFuzz_SetNumber(uint256)":"5c7f60d7","test_Increment()":"4820a105"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"contract Counter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"testFuzz_SetNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_Increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/Counter.t.sol\":\"CounterTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/forge-std/lib/ds-test/src/test.sol\":{\"keccak256\":\"0x8758531bbac3972efcf1fa46383dbe1d276406fe527bc7abb2f236486278e83b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1f64264d61506847acf8761e84aff690cebe830958eac00bac7924d8be569240\",\"dweb:/ipfs/QmSekDJvJ82MZAmr63n7YvfLzQ7gS4NLSHPmHL3GN3rw8k\"]},\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b\",\"dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1419991b2a8eb2de79b9bd2b3c5a0ceb5d7636ab9bcddde0b71701fd6ad47273\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7afc962ec6e60e1ff749cd0d4c671bc3b85386c68d26b824d4a6c6e6e8255e85\",\"dweb:/ipfs/QmWwfj6Qk8QBcnGD45seGnDXtUmC9CYKuPNJCApSjLyPSj\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x67299bfacd77fddfa2a67b8e2b901e0e333618a4975fb94850b07475e51f6de6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1b61121d310f4053ce344b345b4a9ccf43b059daf9097ec2647f594beaca896d\",\"dweb:/ipfs/QmZUCoTtXBM9zfAZVbj2dFPPnKaV1CSZzXE7zictyg3Gfz\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x8f914dbd016bd0e318fe2b8bd556fbc8256c7cddc24e3e4fcb9f3c1c1935592d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://19e704df493dde38323303b07d18cadfeb4dcadf1ddc2301add4aea9474fbb5e\",\"dweb:/ipfs/QmZasuGiLK8LHwWtvpqEBxUR6QFY6GdzLMTJ9q7CMf8PNZ\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x4298f3f4cedaedb07029820b1daad2c03af45379559392201f7bf3ec71105811\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e062f36d8d1ae3c383ef8975757926eaa9c4de3a92b5f1fe2d12748bcd8db32\",\"dweb:/ipfs/QmcWkv3ia5Ew4DZNcudMNSTNXZ3W2QiXTZunRd44e9BT8z\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x502b18a4becda6ecd91fa8b419d8034946bfa80e6cc7f6497f51f8565bfadae0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf499ee483a1dfd02023d4ce78ed4029a49794ccd5b849aaab912faea0d2ba61\",\"dweb:/ipfs/QmP6hwNZW7sYbQK9fBzuZWxfLm6Swx2nKzvZ54qWNqQkzX\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x39b1729d5868c8e94ab8af16751eb500a17fe3870dc627d2b7ddcd5df18d7ad0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1568c82aff125cc4b0fc168be9d67ac313f469a3c7405c5493caecaaaecfb765\",\"dweb:/ipfs/QmXByuZReJsdu1jDcxj1FcmpcUnzoBcqybn9kWgDAECWri\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7c6be780decc2c54d0c65990b2f0a66d6d25778a3840a55977344290ef544fce\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ae80141e1208d1c5a7c3417d79a09aa510c5b6ecaaa08884ca45e42583daed90\",\"dweb:/ipfs/Qmc6MwPwwDC242vwEJWyGhwUbKLKc7ab9hUau2JCmuHrTT\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xd8703f49411737ecf8d411f8fa66b2bf0ef972ba28b7a4adf1748c63df1bf682\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7c10a6b8112f6fe3cdccb6240ecd382765216b1a82e9a86a0fec8f5e09eadd1\",\"dweb:/ipfs/QmdRvPCU4RkjMHsTu3Ric1ZEF1AWDNLp78unFC5aWP17xq\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xa24468244abb66e663fb7eee6463cb518eb9a7c14e1071548ff564cca825bbca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://145585a2194aa6e2d30edfe709ef2814e20b1b4540469aa6a8f50c841fcb9070\",\"dweb:/ipfs/QmZrwbvtpbtTxqbW5phUrwb3F1tBiPSQc6jZJAXBfsBsAh\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"src/Counter.sol\":{\"keccak256\":\"0x0cb1b358d8beda8e5786cb2a975d95a91a8fbbea763f18a437d136d61db4585a\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://8abc57aa49352f710a04e256277d6c35dadd8d8554e4e517ffd89f7a3c5ca814\",\"dweb:/ipfs/QmbtNs1tw9Kraz9dMFBQ2yzR7ceygK6FBJanXvP7thJr6G\"]},\"test/Counter.t.sol\":{\"keccak256\":\"0x69e9c038e968ccccbe0be57c4981ae762f415b6c6c351b3225b1898c83b3d8e0\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://816c1904e007e8488e4fc80219b97a25e9d6eca79d145699770e0fb2f44eece5\",\"dweb:/ipfs/QmT9G9qehChE7xLGg4irXojg15141nqQ5FL3AeNizLxXHY\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"string","name":"","type":"string","indexed":false}],"type":"event","name":"log","anonymous":false},{"inputs":[{"internalType":"address","name":"","type":"address","indexed":false}],"type":"event","name":"log_address","anonymous":false},{"inputs":[{"internalType":"uint256[]","name":"val","type":"uint256[]","indexed":false}],"type":"event","name":"log_array","anonymous":false},{"inputs":[{"internalType":"int256[]","name":"val","type":"int256[]","indexed":false}],"type":"event","name":"log_array","anonymous":false},{"inputs":[{"internalType":"address[]","name":"val","type":"address[]","indexed":false}],"type":"event","name":"log_array","anonymous":false},{"inputs":[{"internalType":"bytes","name":"","type":"bytes","indexed":false}],"type":"event","name":"log_bytes","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32","indexed":false}],"type":"event","name":"log_bytes32","anonymous":false},{"inputs":[{"internalType":"int256","name":"","type":"int256","indexed":false}],"type":"event","name":"log_int","anonymous":false},{"inputs":[{"internalType":"string","name":"key","type":"string","indexed":false},{"internalType":"address","name":"val","type":"address","indexed":false}],"type":"event","name":"log_named_address","anonymous":false},{"inputs":[{"internalType":"string","name":"key","type":"string","indexed":false},{"internalType":"uint256[]","name":"val","type":"uint256[]","indexed":false}],"type":"event","name":"log_named_array","anonymous":false},{"inputs":[{"internalType":"string","name":"key","type":"string","indexed":false},{"internalType":"int256[]","name":"val","type":"int256[]","indexed":false}],"type":"event","name":"log_named_array","anonymous":false},{"inputs":[{"internalType":"string","name":"key","type":"string","indexed":false},{"internalType":"address[]","name":"val","type":"address[]","indexed":false}],"type":"event","name":"log_named_array","anonymous":false},{"inputs":[{"internalType":"string","name":"key","type":"string","indexed":false},{"internalType":"bytes","name":"val","type":"bytes","indexed":false}],"type":"event","name":"log_named_bytes","anonymous":false},{"inputs":[{"internalType":"string","name":"key","type":"string","indexed":false},{"internalType":"bytes32","name":"val","type":"bytes32","indexed":false}],"type":"event","name":"log_named_bytes32","anonymous":false},{"inputs":[{"internalType":"string","name":"key","type":"string","indexed":false},{"internalType":"int256","name":"val","type":"int256","indexed":false},{"internalType":"uint256","name":"decimals","type":"uint256","indexed":false}],"type":"event","name":"log_named_decimal_int","anonymous":false},{"inputs":[{"internalType":"string","name":"key","type":"string","indexed":false},{"internalType":"uint256","name":"val","type":"uint256","indexed":false},{"internalType":"uint256","name":"decimals","type":"uint256","indexed":false}],"type":"event","name":"log_named_decimal_uint","anonymous":false},{"inputs":[{"internalType":"string","name":"key","type":"string","indexed":false},{"internalType":"int256","name":"val","type":"int256","indexed":false}],"type":"event","name":"log_named_int","anonymous":false},{"inputs":[{"internalType":"string","name":"key","type":"string","indexed":false},{"internalType":"string","name":"val","type":"string","indexed":false}],"type":"event","name":"log_named_string","anonymous":false},{"inputs":[{"internalType":"string","name":"key","type":"string","indexed":false},{"internalType":"uint256","name":"val","type":"uint256","indexed":false}],"type":"event","name":"log_named_uint","anonymous":false},{"inputs":[{"internalType":"string","name":"","type":"string","indexed":false}],"type":"event","name":"log_string","anonymous":false},{"inputs":[{"internalType":"uint256","name":"","type":"uint256","indexed":false}],"type":"event","name":"log_uint","anonymous":false},{"inputs":[{"internalType":"bytes","name":"","type":"bytes","indexed":false}],"type":"event","name":"logs","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"IS_TEST","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"counter","outputs":[{"internalType":"contract Counter","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"excludeArtifacts","outputs":[{"internalType":"string[]","name":"excludedArtifacts_","type":"string[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"excludeContracts","outputs":[{"internalType":"address[]","name":"excludedContracts_","type":"address[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"excludeSenders","outputs":[{"internalType":"address[]","name":"excludedSenders_","type":"address[]"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"failed","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"setUp"},{"inputs":[],"stateMutability":"view","type":"function","name":"targetArtifactSelectors","outputs":[{"internalType":"struct StdInvariant.FuzzSelector[]","name":"targetedArtifactSelectors_","type":"tuple[]","components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"targetArtifacts","outputs":[{"internalType":"string[]","name":"targetedArtifacts_","type":"string[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"targetContracts","outputs":[{"internalType":"address[]","name":"targetedContracts_","type":"address[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"targetInterfaces","outputs":[{"internalType":"struct StdInvariant.FuzzInterface[]","name":"targetedInterfaces_","type":"tuple[]","components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"string[]","name":"artifacts","type":"string[]"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"targetSelectors","outputs":[{"internalType":"struct StdInvariant.FuzzSelector[]","name":"targetedSelectors_","type":"tuple[]","components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"targetSenders","outputs":[{"internalType":"address[]","name":"targetedSenders_","type":"address[]"}]},{"inputs":[{"internalType":"uint256","name":"x","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"testFuzz_SetNumber"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"test_Increment"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"test/Counter.t.sol":"CounterTest"},"libraries":{}},"sources":{"lib/forge-std/lib/ds-test/src/test.sol":{"keccak256":"0x8758531bbac3972efcf1fa46383dbe1d276406fe527bc7abb2f236486278e83b","urls":["bzz-raw://1f64264d61506847acf8761e84aff690cebe830958eac00bac7924d8be569240","dweb:/ipfs/QmSekDJvJ82MZAmr63n7YvfLzQ7gS4NLSHPmHL3GN3rw8k"],"license":"GPL-3.0-or-later"},"lib/forge-std/src/Base.sol":{"keccak256":"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c","urls":["bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224","dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK"],"license":"MIT"},"lib/forge-std/src/StdAssertions.sol":{"keccak256":"0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60","urls":["bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b","dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL"],"license":"MIT"},"lib/forge-std/src/StdChains.sol":{"keccak256":"0x1419991b2a8eb2de79b9bd2b3c5a0ceb5d7636ab9bcddde0b71701fd6ad47273","urls":["bzz-raw://7afc962ec6e60e1ff749cd0d4c671bc3b85386c68d26b824d4a6c6e6e8255e85","dweb:/ipfs/QmWwfj6Qk8QBcnGD45seGnDXtUmC9CYKuPNJCApSjLyPSj"],"license":"MIT"},"lib/forge-std/src/StdCheats.sol":{"keccak256":"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7","urls":["bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2","dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc"],"license":"MIT"},"lib/forge-std/src/StdError.sol":{"keccak256":"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77","urls":["bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6","dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj"],"license":"MIT"},"lib/forge-std/src/StdInvariant.sol":{"keccak256":"0x67299bfacd77fddfa2a67b8e2b901e0e333618a4975fb94850b07475e51f6de6","urls":["bzz-raw://1b61121d310f4053ce344b345b4a9ccf43b059daf9097ec2647f594beaca896d","dweb:/ipfs/QmZUCoTtXBM9zfAZVbj2dFPPnKaV1CSZzXE7zictyg3Gfz"],"license":"MIT"},"lib/forge-std/src/StdJson.sol":{"keccak256":"0x8f914dbd016bd0e318fe2b8bd556fbc8256c7cddc24e3e4fcb9f3c1c1935592d","urls":["bzz-raw://19e704df493dde38323303b07d18cadfeb4dcadf1ddc2301add4aea9474fbb5e","dweb:/ipfs/QmZasuGiLK8LHwWtvpqEBxUR6QFY6GdzLMTJ9q7CMf8PNZ"],"license":"MIT"},"lib/forge-std/src/StdMath.sol":{"keccak256":"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2","urls":["bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92","dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC"],"license":"MIT"},"lib/forge-std/src/StdStorage.sol":{"keccak256":"0x4298f3f4cedaedb07029820b1daad2c03af45379559392201f7bf3ec71105811","urls":["bzz-raw://6e062f36d8d1ae3c383ef8975757926eaa9c4de3a92b5f1fe2d12748bcd8db32","dweb:/ipfs/QmcWkv3ia5Ew4DZNcudMNSTNXZ3W2QiXTZunRd44e9BT8z"],"license":"MIT"},"lib/forge-std/src/StdStyle.sol":{"keccak256":"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d","urls":["bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8","dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK"],"license":"MIT"},"lib/forge-std/src/StdUtils.sol":{"keccak256":"0x502b18a4becda6ecd91fa8b419d8034946bfa80e6cc7f6497f51f8565bfadae0","urls":["bzz-raw://bf499ee483a1dfd02023d4ce78ed4029a49794ccd5b849aaab912faea0d2ba61","dweb:/ipfs/QmP6hwNZW7sYbQK9fBzuZWxfLm6Swx2nKzvZ54qWNqQkzX"],"license":"MIT"},"lib/forge-std/src/Test.sol":{"keccak256":"0x39b1729d5868c8e94ab8af16751eb500a17fe3870dc627d2b7ddcd5df18d7ad0","urls":["bzz-raw://1568c82aff125cc4b0fc168be9d67ac313f469a3c7405c5493caecaaaecfb765","dweb:/ipfs/QmXByuZReJsdu1jDcxj1FcmpcUnzoBcqybn9kWgDAECWri"],"license":"MIT"},"lib/forge-std/src/Vm.sol":{"keccak256":"0x7c6be780decc2c54d0c65990b2f0a66d6d25778a3840a55977344290ef544fce","urls":["bzz-raw://ae80141e1208d1c5a7c3417d79a09aa510c5b6ecaaa08884ca45e42583daed90","dweb:/ipfs/Qmc6MwPwwDC242vwEJWyGhwUbKLKc7ab9hUau2JCmuHrTT"],"license":"MIT"},"lib/forge-std/src/console.sol":{"keccak256":"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba","urls":["bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70","dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"],"license":"MIT"},"lib/forge-std/src/console2.sol":{"keccak256":"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea","urls":["bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973","dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF"],"license":"MIT"},"lib/forge-std/src/interfaces/IMulticall3.sol":{"keccak256":"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a","urls":["bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0","dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2"],"license":"MIT"},"lib/forge-std/src/mocks/MockERC20.sol":{"keccak256":"0xd8703f49411737ecf8d411f8fa66b2bf0ef972ba28b7a4adf1748c63df1bf682","urls":["bzz-raw://b7c10a6b8112f6fe3cdccb6240ecd382765216b1a82e9a86a0fec8f5e09eadd1","dweb:/ipfs/QmdRvPCU4RkjMHsTu3Ric1ZEF1AWDNLp78unFC5aWP17xq"],"license":"MIT"},"lib/forge-std/src/mocks/MockERC721.sol":{"keccak256":"0xa24468244abb66e663fb7eee6463cb518eb9a7c14e1071548ff564cca825bbca","urls":["bzz-raw://145585a2194aa6e2d30edfe709ef2814e20b1b4540469aa6a8f50c841fcb9070","dweb:/ipfs/QmZrwbvtpbtTxqbW5phUrwb3F1tBiPSQc6jZJAXBfsBsAh"],"license":"MIT"},"lib/forge-std/src/safeconsole.sol":{"keccak256":"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381","urls":["bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae","dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq"],"license":"MIT"},"src/Counter.sol":{"keccak256":"0x0cb1b358d8beda8e5786cb2a975d95a91a8fbbea763f18a437d136d61db4585a","urls":["bzz-raw://8abc57aa49352f710a04e256277d6c35dadd8d8554e4e517ffd89f7a3c5ca814","dweb:/ipfs/QmbtNs1tw9Kraz9dMFBQ2yzR7ceygK6FBJanXvP7thJr6G"],"license":"UNLICENSED"},"test/Counter.t.sol":{"keccak256":"0x69e9c038e968ccccbe0be57c4981ae762f415b6c6c351b3225b1898c83b3d8e0","urls":["bzz-raw://816c1904e007e8488e4fc80219b97a25e9d6eca79d145699770e0fb2f44eece5","dweb:/ipfs/QmT9G9qehChE7xLGg4irXojg15141nqQ5FL3AeNizLxXHY"],"license":"UNLICENSED"}},"version":1},"ast":{"absolutePath":"test/Counter.t.sol","id":44711,"exportedSymbols":{"Counter":[44645],"CounterTest":[44710],"Test":[12218],"console2":[30258]},"nodeType":"SourceUnit","src":"39:525:23","nodes":[{"id":44647,"nodeType":"PragmaDirective","src":"39:24:23","nodes":[],"literals":["solidity","^","0.8",".13"]},{"id":44650,"nodeType":"ImportDirective","src":"65:50:23","nodes":[],"absolutePath":"lib/forge-std/src/Test.sol","file":"forge-std/Test.sol","nameLocation":"-1:-1:-1","scope":44711,"sourceUnit":12219,"symbolAliases":[{"foreign":{"id":44648,"name":"Test","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12218,"src":"73:4:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":44649,"name":"console2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30258,"src":"79:8:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":44652,"nodeType":"ImportDirective","src":"116:43:23","nodes":[],"absolutePath":"src/Counter.sol","file":"../src/Counter.sol","nameLocation":"-1:-1:-1","scope":44711,"sourceUnit":44646,"symbolAliases":[{"foreign":{"id":44651,"name":"Counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44645,"src":"124:7:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":44710,"nodeType":"ContractDefinition","src":"161:402:23","nodes":[{"id":44657,"nodeType":"VariableDeclaration","src":"196:22:23","nodes":[],"constant":false,"functionSelector":"61bc221a","mutability":"mutable","name":"counter","nameLocation":"211:7:23","scope":44710,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Counter_$44645","typeString":"contract Counter"},"typeName":{"id":44656,"nodeType":"UserDefinedTypeName","pathNode":{"id":44655,"name":"Counter","nameLocations":["196:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":44645,"src":"196:7:23"},"referencedDeclaration":44645,"src":"196:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_Counter_$44645","typeString":"contract Counter"}},"visibility":"public"},{"id":44674,"nodeType":"FunctionDefinition","src":"225:94:23","nodes":[],"body":{"id":44673,"nodeType":"Block","src":"249:70:23","nodes":[],"statements":[{"expression":{"id":44665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":44660,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44657,"src":"259:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_Counter_$44645","typeString":"contract Counter"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":44663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"269:11:23","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_Counter_$44645_$","typeString":"function () returns (contract Counter)"},"typeName":{"id":44662,"nodeType":"UserDefinedTypeName","pathNode":{"id":44661,"name":"Counter","nameLocations":["273:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":44645,"src":"273:7:23"},"referencedDeclaration":44645,"src":"273:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_Counter_$44645","typeString":"contract Counter"}}},"id":44664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"269:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Counter_$44645","typeString":"contract Counter"}},"src":"259:23:23","typeDescriptions":{"typeIdentifier":"t_contract$_Counter_$44645","typeString":"contract Counter"}},"id":44666,"nodeType":"ExpressionStatement","src":"259:23:23"},{"expression":{"arguments":[{"hexValue":"30","id":44670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"310:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":44667,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44657,"src":"292:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_Counter_$44645","typeString":"contract Counter"}},"id":44669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"300:9:23","memberName":"setNumber","nodeType":"MemberAccess","referencedDeclaration":44637,"src":"292:17:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":44671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"292:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44672,"nodeType":"ExpressionStatement","src":"292:20:23"}]},"functionSelector":"0a9254e4","implemented":true,"kind":"function","modifiers":[],"name":"setUp","nameLocation":"234:5:23","parameters":{"id":44658,"nodeType":"ParameterList","parameters":[],"src":"239:2:23"},"returnParameters":{"id":44659,"nodeType":"ParameterList","parameters":[],"src":"249:0:23"},"scope":44710,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":44690,"nodeType":"FunctionDefinition","src":"325:108:23","nodes":[],"body":{"id":44689,"nodeType":"Block","src":"358:75:23","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":44677,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44657,"src":"368:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_Counter_$44645","typeString":"contract Counter"}},"id":44679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"376:9:23","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":44644,"src":"368:17:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":44680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"368:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44681,"nodeType":"ExpressionStatement","src":"368:19:23"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":44683,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44657,"src":"406:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_Counter_$44645","typeString":"contract Counter"}},"id":44684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"414:6:23","memberName":"number","nodeType":"MemberAccess","referencedDeclaration":44623,"src":"406:14:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":44685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"406:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":44686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"424:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":44682,"name":"assertEq","nodeType":"Identifier","overloadedDeclarations":[2524,2549,2562,2578,2620,2662,2704,2741,2778,2815,320,345,375,400,459,484,514,539,2012,2047],"referencedDeclaration":514,"src":"397:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":44687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"397:29:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44688,"nodeType":"ExpressionStatement","src":"397:29:23"}]},"functionSelector":"4820a105","implemented":true,"kind":"function","modifiers":[],"name":"test_Increment","nameLocation":"334:14:23","parameters":{"id":44675,"nodeType":"ParameterList","parameters":[],"src":"348:2:23"},"returnParameters":{"id":44676,"nodeType":"ParameterList","parameters":[],"src":"358:0:23"},"scope":44710,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":44709,"nodeType":"FunctionDefinition","src":"439:122:23","nodes":[],"body":{"id":44708,"nodeType":"Block","src":"485:76:23","nodes":[],"statements":[{"expression":{"arguments":[{"id":44698,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44692,"src":"513:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44695,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44657,"src":"495:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_Counter_$44645","typeString":"contract Counter"}},"id":44697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"503:9:23","memberName":"setNumber","nodeType":"MemberAccess","referencedDeclaration":44637,"src":"495:17:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":44699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"495:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44700,"nodeType":"ExpressionStatement","src":"495:20:23"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":44702,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44657,"src":"534:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_Counter_$44645","typeString":"contract Counter"}},"id":44703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:6:23","memberName":"number","nodeType":"MemberAccess","referencedDeclaration":44623,"src":"534:14:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":44704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"534:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":44705,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44692,"src":"552:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":44701,"name":"assertEq","nodeType":"Identifier","overloadedDeclarations":[2524,2549,2562,2578,2620,2662,2704,2741,2778,2815,320,345,375,400,459,484,514,539,2012,2047],"referencedDeclaration":514,"src":"525:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":44706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"525:29:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44707,"nodeType":"ExpressionStatement","src":"525:29:23"}]},"functionSelector":"5c7f60d7","implemented":true,"kind":"function","modifiers":[],"name":"testFuzz_SetNumber","nameLocation":"448:18:23","parameters":{"id":44693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44692,"mutability":"mutable","name":"x","nameLocation":"475:1:23","nodeType":"VariableDeclaration","scope":44709,"src":"467:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44691,"name":"uint256","nodeType":"ElementaryTypeName","src":"467:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"466:11:23"},"returnParameters":{"id":44694,"nodeType":"ParameterList","parameters":[],"src":"485:0:23"},"scope":44710,"stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"abstract":false,"baseContracts":[{"baseName":{"id":44653,"name":"Test","nameLocations":["185:4:23"],"nodeType":"IdentifierPath","referencedDeclaration":12218,"src":"185:4:23"},"id":44654,"nodeType":"InheritanceSpecifier","src":"185:4:23"}],"canonicalName":"CounterTest","contractDependencies":[44645],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[44710,12218,12167,7765,7440,6647,4587,3823,2291,2357,2354],"name":"CounterTest","nameLocation":"170:11:23","scope":44711,"usedErrors":[],"usedEvents":[5,9,13,17,21,25,29,33,39,45,53,61,67,73,79,85,2418,2423,2428,2435,2442,2449]}],"license":"UNLICENSED"},"id":23}